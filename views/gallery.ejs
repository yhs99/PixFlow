<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="/uploads/star.ico">
    <title>별단 추억갤러리</title>
    <style>
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(15px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
            }
            to {
                opacity: 1;
            }
        }

        @keyframes scaleIn {
            from {
                opacity: 0;
                transform: scale(0.9);
            }
            to {
                opacity: 1;
                transform: scale(1);
            }
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        .header {
            position: fixed;
            top: 60px; /* 메인 헤더 아래에 위치하도록 수정 */
            left: 0;
            right: 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem 2rem;
            background: rgba(10, 25, 47, 0.95);
            backdrop-filter: blur(10px);
            z-index: 999;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .header-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 2rem;
            height: 60px;
            max-width: 1200px;
            margin: 0 auto;
        }
        
        .main-logo {
            display: flex;
            align-items: center;
            gap: 1rem;
        }
        
        .main-logo img {
            width: 32px;
            height: 32px;
        }
        
        .main-logo h1 {
            font-size: 1.3rem;
            color: white;
            text-shadow: 0 0 10px rgba(255, 192, 203, 0.5);
            margin: 0;
        }
        
        .nav-tabs {
            display: flex;
            gap: 1rem;
        }
        
        .nav-tab {
            color: rgba(255, 255, 255, 0.7);
            text-decoration: none;
            padding: 0.5rem 1rem;
            border-radius: 5px;
            transition: all 0.2s ease;
            font-weight: 500;
        }
        
        .nav-tab:hover {
            color: white;
            background: rgba(255, 255, 255, 0.1);
        }
        
        .nav-tab.active {
            color: white;
            background: rgba(100, 255, 218, 0.1);
            border-bottom: 2px solid #64ffda;
        }
        
        @media (max-width: 768px) {
            .header-container {
                padding: 0 1rem;
            }
            
            .main-logo h1 {
                font-size: 1rem;
            }
            
            .nav-tab {
                padding: 0.5rem;
            }
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        @media (min-width: 1025px) {
            .header {
                left: 240px; /* 사이드바 너비만큼 여백 */
            }
        }

        @media (max-width: 1024px) {
            .logo {
                display: none; /* 로고를 숨김 처리 */
            }
        }

        .logo img {
            width: 32px;
            height: 32px;
        }

        .logo h1 {
            font-size: 1.5rem;
            color: white;
            text-shadow: 0 0 10px rgba(255, 192, 203, 0.5);
        }

        body {
            font-family: 'SANS-KR', sans-serif;
            background-color: #0a192f;
            background-image: 
                radial-gradient(1px 1px at 10% 10%, white 1px, transparent 0),
                radial-gradient(1px 1px at 20% 30%, rgba(255,255,255,0.9) 1px, transparent 0),
                radial-gradient(1.2px 1.2px at 35% 25%, rgba(255,255,255,0.8) 1px, transparent 0),
                radial-gradient(1.3px 1.3px at 45% 45%, white 1px, transparent 0),
                radial-gradient(1.5px 1.5px at 60% 50%, rgba(255,255,255,0.9) 1px, transparent 0),
                radial-gradient(2px 2px at 75% 70%, rgba(255,255,255,0.8) 1px, transparent 0),
                radial-gradient(2.5px 2.5px at 85% 15%, white 1px, transparent 0),
                radial-gradient(1.2px 1.2px at 90% 88%, rgba(255,255,255,0.7) 1px, transparent 0),
                radial-gradient(1.8px 1.8px at 15% 85%, rgba(255,255,255,0.8) 1px, transparent 0),
                radial-gradient(1.4px 1.4px at 25% 68%, white 1px, transparent 0),
                radial-gradient(1.6px 1.6px at 55% 82%, rgba(255,255,255,0.9) 1px, transparent 0),
                radial-gradient(1.2px 1.2px at 40% 93%, rgba(255,255,255,0.7) 1px, transparent 0),
                radial-gradient(1.7px 1.7px at 70% 93%, white 1px, transparent 0),
                radial-gradient(1px 1px at 5% 5%, rgba(255,255,255,0.8) 1px, transparent 0),
                radial-gradient(1.5px 1.5px at 15% 15%, white 1px, transparent 0),
                radial-gradient(1.2px 1.2px at 30% 15%, rgba(255,255,255,0.9) 1px, transparent 0),
                radial-gradient(1.3px 1.3px at 50% 20%, rgba(255,255,255,0.8) 1px, transparent 0),
                radial-gradient(1.8px 1.8px at 65% 25%, white 1px, transparent 0),
                radial-gradient(2px 2px at 80% 30%, rgba(255,255,255,0.9) 1px, transparent 0),
                radial-gradient(1.4px 1.4px at 95% 35%, rgba(255,255,255,0.8) 1px, transparent 0),
                radial-gradient(1.6px 1.6px at 10% 40%, white 1px, transparent 0),
                radial-gradient(1.2px 1.2px at 25% 45%, rgba(255,255,255,0.7) 1px, transparent 0),
                radial-gradient(1.7px 1.7px at 40% 50%, rgba(255,255,255,0.8) 1px, transparent 0),
                radial-gradient(1.5px 1.5px at 55% 55%, white 1px, transparent 0),
                radial-gradient(1.3px 1.3px at 70% 60%, rgba(255,255,255,0.9) 1px, transparent 0),
                radial-gradient(1.8px 1.8px at 85% 65%, rgba(255,255,255,0.8) 1px, transparent 0),
                radial-gradient(1.4px 1.4px at 100% 70%, white 1px, transparent 0),
                radial-gradient(1.6px 1.6px at 5% 75%, rgba(255,255,255,0.7) 1px, transparent 0),
                radial-gradient(1.2px 1.2px at 20% 80%, rgba(255,255,255,0.8) 1px, transparent 0),
                radial-gradient(1.7px 1.7px at 35% 85%, white 1px, transparent 0),
                radial-gradient(1.5px 1.5px at 50% 90%, rgba(255,255,255,0.9) 1px, transparent 0),
                radial-gradient(1.3px 1.3px at 65% 95%, rgba(255,255,255,0.8) 1px, transparent 0),
                radial-gradient(2px 2px at 80% 100%, white 1px, transparent 0),
                linear-gradient(to bottom, #0a192f 0%, #20344d 100%);
            background-size: 100% 100%;
            background-repeat: no-repeat;
            color: #fff;
            min-height: 100vh;
            display: flex;
            overflow-x: hidden;
            position: relative;
            padding-top: 60px; /* 메인 헤더를 위한 패딩 추가 */
        }

        .sidebar {
            width: 240px;
            background: rgba(10, 25, 47, 0.95);
            backdrop-filter: blur(10px);
            padding: 80px 20px 20px; /* 상단 패딩을 80px로 늘려 헤더 아래에서 시작하도록 조정 */
            border-right: 1px solid rgba(255, 255, 255, 0.1);
            position: fixed;
            height: 100vh;
            left: 0;
            top: 0; /* 최상단에 위치 */
            overflow-y: auto;
            z-index: 999; /* 헤더(z-index: 1001)보다 낮고 다른 요소보다 높게 설정 */
            transition: transform 0.3s ease;
        }

        .sidebar h2 {
            color: #fff;
            margin-top: 5px;
            margin-bottom: 20px;
            text-align: center;
            text-shadow: 0 0 10px rgba(255, 192, 203, 0.5);
        }

        .month-list {
            list-style: none;
            margin-top: 10px;
            padding-left: 0;
        }

        .month-item {
            padding: 10px;
            margin: 5px 0;
            cursor: pointer;
            border-radius: 5px;
            transition: all 0.3s ease;
        }

        .month-item:hover {
            background: rgba(255, 192, 203, 0.2);
        }

        .month-item.active {
            background: rgba(255, 192, 203, 0.3);
        }

        .main-content {
            margin-top: 20px; /* 상단 마진 줄임 - 헤더로 인한 padding-top이 body에 이미 있음 */
            flex: 1;
            margin-left: 240px;
            padding: 40px;
            width: calc(100% - 240px);
            position: relative;
            z-index: 1;
            transition: margin-left 0.3s ease;
        }

        .sort-container {
            display: flex;
            justify-content: flex-start;
            margin-bottom: 20px;
            padding: 0 20px;
        }

        .sort-button {
            background: rgba(255, 255, 255, 0.1);
            border: none;
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 14px;
        }

        .sort-button:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .sort-button.active {
            background: rgba(255, 192, 203, 0.2);
        }

        .sort-button svg {
            width: 16px;
            height: 16px;
            transition: transform 0.3s ease;
        }

        .sort-button.desc svg {
            transform: rotate(180deg);
        }

        .month-header {
            text-align: center;
            margin-bottom: 40px;
            font-size: 2em;
            text-shadow: 0 0 10px rgba(255, 192, 203, 0.5);
            animation: fadeInUp 0.8s ease-out;
        }

        .image-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 30px;
            padding: 20px;
        }

        .image-item {
            position: relative;
            margin-bottom: 20px;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            aspect-ratio: 1;
            cursor: pointer;
        }

        .image-item.with-animation {
            animation: fadeInUp 0.4s ease-out;
            animation-fill-mode: both;
        }

        .image-item.with-animation:nth-child(n) {
            animation-delay: calc(0.05s * var(--index));
        }

        .image-item:hover {
            transform: translateY(-10px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
        }

        .image-item img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            display: block;
            transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        }

        .image-item:hover img {
            transform: scale(1.05);
        }

        .image-description {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            padding: 15px;
            background: rgba(0, 0, 0, 0.7);
            color: white;
            transform: translateY(100%);
            transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1), opacity 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            backdrop-filter: blur(5px);
            opacity: 0;
        }

        .image-item:hover .image-description {
            transform: translateY(0);
            opacity: 1;
        }

        .image-comment-count {
            position: absolute;
            top: 45px;
            left: 8px;
            background: rgba(0, 0, 0, 0.7);
            color: white;
            border: none;
            border-radius: 20px;
            padding: 3px 6px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 4px;
            font-size: 0.75em;
            cursor: pointer;
            transition: all 0.2s;
            opacity: 0;
            z-index: 10;
        }

        .image-item:hover .image-comment-count {
            opacity: 1;
        }

        .image-comment-count:hover {
            background: rgba(88, 101, 242, 0.9);
        }

        .image-comment-count svg {
            width: 12px;
            height: 12px;
        }

        .uploader-info {
            position: absolute;
            top: 8px;
            left: 8px;
            padding: 4px;
            background: rgba(0, 0, 0, 0.5);
            color: white;
            display: flex;
            align-items: center;
            gap: 4px;
            border-radius: 12px;
            backdrop-filter: blur(2px);
            transition: all 0.3s ease;
            z-index: 11;
        }

        .uploader-info.compact {
            width: 32px;
            height: 32px;
            padding: 0;
            overflow: hidden;
        }

        .uploader-info.compact .uploader-name {
            display: none;
        }

        .uploader-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            object-fit: cover;
        }

        .uploader-name {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 100px;
            font-size: 0.7em;
        }

        .empty-message {
            text-align: center;
            padding: 40px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            margin: 20px;
            color: rgba(255, 255, 255, 0.7);
            font-style: italic;
        }

        .slider-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(10, 25, 47, 0.95);
            backdrop-filter: blur(10px);
            z-index: 1100; /* z-index를 1100으로 높임 (헤더의 1001보다 높게) */
            display: flex;
            justify-content: center;
            align-items: center;
            opacity: 0;
            visibility: hidden;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            padding: 80px 0 20px; /* 상단 패딩을 80px로 증가시켜 헤더 아래에 콘텐츠가 위치하도록 함 */
            overflow-y: hidden;
            overflow-x: hidden;
        }

        .slider-overlay.active {
            opacity: 1;
            visibility: visible;
        }

        .slider-overlay.active.with-comments-open {
            overflow-y: auto;
        }

        .slider-content.with-comments {
            max-width: 100%;
        }

        .slider-content {
            position: relative;
            width: 90%;
            max-width: 100%;
            display: flex;
            align-items: flex-start;
            transform: scale(0.9);
            opacity: 0;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            gap: 20px;
            padding: 0 40px;
            justify-content: flex-end;
        }

        .slider-image-container {
            width: calc(100% - 420px);
            transition: transform 0.6s cubic-bezier(0.4, 0, 0.2, 1);
            transform: translateX(200px);
            min-width: 0;
        }

        .slider-image {
            max-width: 100%;
            max-height: 80vh;
            object-fit: contain;
            border-radius: 10px;
            box-shadow: 0 0 30px rgba(255, 192, 203, 0.3);
            width: 100%;
            height: auto;
        }

        .slider-content.with-comments .slider-image-container {
            transform: translateX(0);
        }

        .comments-panel {
            position: relative;
            width: 400px;
            max-width: 400px;
            height: 80vh;
            background: rgba(0, 0, 0, 0.8);
            border-radius: 15px;
            overflow-y: auto;
            transition: transform 0.6s cubic-bezier(0.4, 0, 0.2, 1), opacity 0.6s cubic-bezier(0.4, 0, 0.2, 1);
            opacity: 0;
            margin-left: 20px;
            flex-shrink: 0;
            transform: translateX(100%);
            display: flex;
            flex-direction: column;
        }

        .comments-panel.active {
            opacity: 1;
            transform: translateX(0);
        }

        .comments-toggle {
            position: static;
            width: auto;
            height: auto;
            transform: none;
            background: none;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .comment-count {
            font-size: 0.7em;
            margin-top: 2px;
            color: rgba(255, 255, 255, 0.7);
        }

        .slider-content.with-comments .comments-toggle {
            color: #5865F2;
        }

        .slider-content.with-comments .comment-count {
            color: #5865F2;
        }

        .comments-header {
            padding: 15px 20px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .comments-count {
            font-size: 1.1em;
            font-weight: 500;
            color: white;
        }

        .comments-close {
            background: none;
            border: none;
            color: rgba(255, 255, 255, 0.7);
            cursor: pointer;
            padding: 5px;
        }

        .comments-close:hover {
            color: white;
        }

        .comments-list {
            height: calc(100% - 120px);
            overflow-y: auto;
            padding: 20px;
            margin-bottom: 120px;
        }

        .comment {
            margin-bottom: 20px;
            animation: fadeIn 0.3s ease;
        }

        .comment-header {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 8px;
        }

        .comment-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            object-fit: cover;
        }

        .comment-author {
            font-weight: 500;
            color: white;
            font-size: 0.9em;
        }

        .comment-content {
            color: rgba(255, 255, 255, 0.9);
            font-size: 0.95em;
            line-height: 1.4;
            margin-left: 42px;
            word-break: break-word;
        }

        .comment-actions {
            margin-top: 8px;
            margin-left: 42px;
            display: flex;
            gap: 15px;
        }

        .comment-action {
            background: none;
            border: none;
            color: rgba(255, 255, 255, 0.6);
            font-size: 0.85em;
            cursor: pointer;
            padding: 0;
            transition: color 0.2s;
        }

        .comment-action:hover {
            color: white;
        }

        .replies {
            margin-left: 42px;
            margin-top: 15px;
            padding-left: 15px;
            border-left: 2px solid rgba(255, 255, 255, 0.1);
        }

        .comment-form {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            padding: 15px 20px;
            background: rgba(0, 0, 0, 0.9);
            border-top: 1px solid rgba(255, 255, 255, 0.1);
            height: 120px;
        }

        .comment-input {
            width: 100%;
            padding: 12px;
            border-radius: 20px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            background: rgba(255, 255, 255, 0.1);
            color: white;
            font-size: 0.9em;
            resize: none;
            margin-bottom: 10px;
            transition: all 0.3s ease;
        }

        .comment-input:focus {
            outline: none;
            border-color: rgba(255, 255, 255, 0.4);
            background: rgba(255, 255, 255, 0.15);
        }

        .comment-submit {
            padding: 8px 20px;
            border-radius: 20px;
            border: none;
            background: #5865F2;
            color: white;
            font-size: 0.9em;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .comment-submit:hover {
            background: #4752C4;
        }

        .comment-submit:disabled {
            background: #666;
            cursor: not-allowed;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .slider-overlay.active .slider-content {
            transform: scale(1);
            opacity: 1;
        }

        .slider-close {
            position: absolute;
            top: 80px; /* 상단에서 80px 떨어진 위치로 조정 */
            right: 20px;
            background: rgba(255, 255, 255, 0.1);
            border: none;
            color: white;
            font-size: 30px;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            z-index: 1102; /* 슬라이더 내에서 최상위로 표시 */
        }

        .slider-close:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: scale(1.1);
        }

        .description-container {
            margin-top: 20px;
            position: relative;
            width: 100%;
            transform: translateY(20px);
            opacity: 0;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            transition-delay: 0.2s;
            display: flex;
            align-items: flex-start;
            gap: 20px;
            background: rgba(0, 0, 0, 0.6);
            border-radius: 10px;
            padding: 15px 20px;
        }

        .slider-overlay.active .description-container {
            transform: translateY(0);
            opacity: 1;
        }

        .slider-description {
            margin: 0;
            flex: 1;
            line-height: 1.5;
            word-break: break-word;
        }

        .icon-container {
            display: flex;
            gap: 10px;
            flex-shrink: 0;
            align-items: center;
        }

        .edit-icon, .comments-toggle {
            background: none;
            border: none;
            color: rgba(255, 255, 255, 0.7);
            cursor: pointer;
            padding: 5px;
            transition: all 0.3s ease;
        }

        .edit-icon:hover, .comments-toggle:hover {
            color: white;
            transform: scale(1.1);
        }

        /* 모바일 메뉴 토글 버튼 */
        .menu-toggle {
            display: none;
            position: fixed;
            top: 70px; /* 헤더 아래에 위치하도록 조정 */
            left: 20px;
            z-index: 1001;
            background: rgba(255, 255, 255, 0.1);
            border: none;
            color: white;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            cursor: pointer;
            align-items: center;
            justify-content: center;
        }

        /* 반응형 디자인 */
        @media (max-width: 1024px) {
            .sidebar {
                transform: translateX(-100%);
                padding-top: 90px; /* 모바일에서 상단 패딩 약간 더 늘림 */
            }

            .sidebar.active {
                transform: translateX(0);
            }

            .main-content {
                margin-left: 0;
                width: 100%;
            }

            .menu-toggle {
                display: flex;
            }

            .image-grid {
                grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
                gap: 20px;
            }
        }

        @media (max-width: 1600px) {
            .slider-content {
                flex-direction: column;
                align-items: center;
                padding: 0 20px;
                width: 100%;
                max-width: 900px;
                margin: 0 auto;
            }

            .slider-overlay {
                align-items: flex-start;
                padding-top: 80px;
                padding-bottom: 40px;
            }

            .slider-overlay.active .slider-content {
                margin-bottom: 40px;
            }

            .slider-image-container {
                width: 100% !important;
                transform: translateX(0) !important;
                max-width: 900px;
            }

            .slider-image {
                max-height: 60vh;
                width: auto;
                margin: 0 auto;
                display: block;
            }

            .comments-panel {
                width: 100%;
                max-width: 900px;
                height: auto;
                max-height: 60vh;
                margin-left: 0;
                margin-top: 20px;
                transform: translateY(50px);
            }

            .comments-panel.active {
                transform: translateY(0);
            }

            .slider-content.with-comments .slider-image-container {
                transform: translateX(0) !important;
            }

            .comments-list {
                max-height: calc(60vh - 120px);
            }
        }

        @media (max-width: 768px) {
            .main-content {
                padding: 20px;
            }

            .image-grid {
                grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
                gap: 15px;
            }

            .month-header {
                font-size: 1.5em;
                margin-bottom: 20px;
            }

            .slider-content {
                padding: 0 20px;
            }

            .slider-image {
                max-height: 60vh;
            }
            
            .logo {
                margin-left: 50px;
            }
        }

        @media (max-width: 480px) {
            .image-grid {
                grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
                gap: 10px;
            }

            .month-header {
                font-size: 1.2em;
            }

            .delete-form {
                width: 90%;
                padding: 15px;
            }
            
            .logo h1 {
                font-size: 1.2rem;
            }
            
            .logo {
                margin-left: 45px;
            }
        }

        .slider-uploader-info {
            position: absolute;
            top: 80px; /* 상단에서 80px 떨어진 위치로 조정 */
            left: 20px;
            padding: 8px 12px;
            background: rgba(0, 0, 0, 0.7);
            color: white;
            display: flex;
            align-items: center;
            gap: 8px;
            border-radius: 20px;
            backdrop-filter: blur(5px);
            z-index: 1101;
        }

        .slider-uploader-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            object-fit: cover;
        }

        .slider-uploader-name {
            font-size: 0.9em;
            font-weight: 500;
        }

        .auth-buttons {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .discord-login-button {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            background-color: #5865F2;
            color: white;
            text-decoration: none;
            border-radius: 4px;
            font-weight: 500;
            transition: background-color 0.2s;
        }

        .discord-login-button:hover {
            background-color: #4752C4;
        }

        .discord-login-button img {
            width: 20px;
            height: 20px;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            position: relative;
            cursor: pointer;
            background: rgba(255, 255, 255, 0.1);
            padding: 6px 12px;
            border-radius: 20px;
            transition: all 0.2s ease;
        }

        .user-info:hover {
            background: rgba(255, 255, 255, 0.15);
        }

        .user-avatar {
            width: 28px;
            height: 28px;
            border-radius: 50%;
        }

        .user-name {
            font-weight: 500;
            margin-right: 4px;
        }

        .user-menu-toggle {
            color: rgba(255, 255, 255, 0.7);
            font-size: 16px;
            transition: transform 0.2s;
        }

        .user-info.active .user-menu-toggle {
            transform: rotate(180deg);
        }

        .user-menu {
            position: absolute;
            top: 45px;
            right: 0;
            width: 150px;
            background: rgba(10, 25, 47, 0.95);
            border-radius: 8px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(255, 255, 255, 0.1);
            overflow: hidden;
            z-index: 100;
            display: none;
            transform: translateY(-10px);
            opacity: 0;
            transition: transform 0.2s, opacity 0.2s;
        }

        .user-menu.active {
            display: block;
            transform: translateY(0);
            opacity: 1;
            animation: fadeIn 0.2s ease-out;
        }

        .user-menu-item {
            padding: 12px 15px;
            color: white;
            cursor: pointer;
            transition: all 0.2s;
            border-bottom: 1px solid rgba(255, 255, 255, 0.05);
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .logout-button {
            padding: 0.25rem 0.5rem;
            background-color: #dc3545;
            color: white;
            text-decoration: none;
            border-radius: 4px;
            font-size: 0.875rem;
            transition: background-color 0.2s;
        }

        .logout-button:hover {
            background-color: #c82333;
        }

        .comments-section {
            margin-top: 20px;
            padding: 20px;
            background: rgba(0, 0, 0, 0.6);
            border-radius: 10px;
            max-width: 800px;
            width: 100%;
        }

        .comment-form {
            margin-bottom: 20px;
        }

        .comment-input {
            width: 100%;
            padding: 10px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            background: rgba(255, 255, 255, 0.1);
            color: white;
            border-radius: 5px;
            margin-bottom: 10px;
            resize: vertical;
            min-height: 60px;
        }

        .comment-submit {
            padding: 8px 16px;
            background: #5865F2;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .comment-submit:hover {
            background: #4752C4;
        }

        .comment-submit:disabled {
            background: #666;
            cursor: not-allowed;
        }

        .comment {
            margin-bottom: 15px;
            padding: 10px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 5px;
        }

        .comment-header {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 5px;
        }

        .comment-avatar {
            width: 24px;
            height: 24px;
            border-radius: 50%;
        }

        .comment-author {
            font-weight: 500;
            color: white;
        }

        .comment-content {
            margin: 5px 0;
            color: rgba(255, 255, 255, 0.9);
        }

        .comment-actions {
            display: flex;
            gap: 10px;
            margin-top: 5px;
        }

        .comment-action {
            background: none;
            border: none;
            color: rgba(255, 255, 255, 0.7);
            cursor: pointer;
            font-size: 0.9em;
            padding: 0;
        }

        .comment-action:hover {
            color: white;
        }

        .reply-form {
            margin-top: 10px;
            margin-left: 20px;
            display: none;
        }

        .reply-form.active {
            display: block;
        }

        .replies {
            margin-left: 20px;
            border-left: 2px solid rgba(255, 255, 255, 0.1);
            padding-left: 10px;
        }

        .delete-comment {
            color: #ff4444;
        }

        .edit-form {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.9);
            padding: 20px;
            border-radius: 10px;
            width: 90%;
            max-width: 500px;
            z-index: 3;
            display: none;
        }

        .edit-form.active {
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .edit-form input,
        .edit-form textarea {
            width: 100%;
            padding: 12px;
            margin: 8px 0;
            border-radius: 8px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            background: rgba(255, 255, 255, 0.1);
            color: white;
            font-size: 14px;
        }

        .edit-form textarea {
            height: 120px;
            resize: vertical;
        }

        .edit-buttons {
            display: flex;
            gap: 15px;
            margin-top: 15px;
            justify-content: center;
            width: 100%;
        }

        .edit-buttons button {
            padding: 10px 20px;
            border-radius: 8px;
            border: none;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 14px;
            min-width: 100px;
        }

        .edit-buttons button:first-child {
            background: #4CAF50;
            color: white;
        }

        .edit-buttons button:last-child {
            background: #f44336;
            color: white;
        }

        .edit-buttons button:hover {
            opacity: 0.9;
            transform: translateY(-2px);
        }

        .delete-icon {
            position: absolute;
            top: 10px;
            right: 10px;
            background: rgba(255, 255, 255, 0.9);
            border: none;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s;
            opacity: 0;
            z-index: 10;
        }

        .image-item:hover .delete-icon {
            opacity: 1;
        }

        .delete-icon:hover {
            background: rgba(255, 0, 0, 0.9);
            color: white;
        }

        .delete-form {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) scale(0.9);
            background: rgba(10, 25, 47, 0.95);
            backdrop-filter: blur(10px);
            padding: 2rem;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
            z-index: 1000;
            opacity: 0;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            border: 1px solid rgba(255, 255, 255, 0.1);
            min-width: 300px;
            max-width: 90%;
        }

        .delete-form.active {
            transform: translate(-50%, -50%) scale(1);
            opacity: 1;
        }

        .delete-form h3 {
            color: white;
            margin-bottom: 1rem;
            font-size: 1.5rem;
            font-weight: 500;
        }

        .delete-form p {
            color: rgba(255, 255, 255, 0.7);
            margin-bottom: 1.5rem;
            line-height: 1.5;
        }

        .delete-form input {
            width: 100%;
            padding: 0.75rem 1rem;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 6px;
            color: white;
            font-size: 1rem;
            margin-bottom: 1.5rem;
            transition: all 0.3s ease;
        }

        .delete-form input:focus {
            outline: none;
            border-color: rgba(255, 255, 255, 0.4);
            background: rgba(255, 255, 255, 0.15);
        }

        .delete-form .buttons {
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
        }

        .delete-form button {
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .delete-form button.cancel {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: white;
        }

        .delete-form button.cancel:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .delete-form button.confirm {
            background: rgba(255, 59, 48, 0.9);
            border: none;
            color: white;
        }

        .delete-form button.confirm:hover {
            background: rgba(255, 59, 48, 1);
            transform: translateY(-1px);
        }

        .delete-form-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(5px);
            z-index: 999;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .delete-form-overlay.active {
            opacity: 1;
        }

        .slider-nav-button {
            position: fixed;
            top: 50%;
            transform: translateY(-50%);
            width: 50px;
            height: 50px;
            background: rgba(0, 0, 0, 0.5);
            border: none;
            border-radius: 50%;
            color: white;
            font-size: 24px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            z-index: 1101; /* z-index 값 증가 */
        }

        .slider-nav-button:hover {
            background: rgba(0, 0, 0, 0.8);
            transform: translateY(-50%) scale(1.1);
        }

        .slider-nav-prev {
            left: 40px; /* 위치 조정 */
        }

        .slider-nav-next {
            right: 40px; /* 위치 조정 */
        }

        .slider-nav-button svg {
            width: 24px;
            height: 24px;
            stroke: currentColor;
            stroke-width: 2;
            stroke-linecap: round;
            stroke-linejoin: round;
        }

        @media (max-width: 768px) {
            .slider-nav-button {
                width: 40px;
                height: 40px;
                font-size: 20px;
            }

            .slider-nav-prev {
                left: 10px;
            }

            .slider-nav-next {
                right: 10px;
            }
        }

        /* 회원탈퇴 모달 스타일 */
        .withdraw-modal {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(5px);
            z-index: 1000;
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s ease, visibility 0.3s ease;
        }

        .withdraw-modal.active {
            opacity: 1;
            visibility: visible;
        }

        .withdraw-form {
            background: rgba(10, 25, 47, 0.95);
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(255, 255, 255, 0.1);
            padding: 2rem;
            width: 90%;
            max-width: 450px;
            transform: translateY(20px);
            transition: transform 0.3s ease;
        }

        .withdraw-modal.active .withdraw-form {
            transform: translateY(0);
        }

        .withdraw-form h3 {
            color: white;
            margin-bottom: 1rem;
            font-size: 1.5rem;
            font-weight: 500;
        }

        .withdraw-form p {
            color: rgba(255, 255, 255, 0.8);
            margin-bottom: 1.5rem;
            line-height: 1.6;
            font-size: 0.95rem;
        }

        .withdraw-form .buttons {
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
        }

        .withdraw-form button {
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            border: none;
        }

        .withdraw-form button.cancel {
            background: rgba(255, 255, 255, 0.1);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .withdraw-form button.cancel:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .withdraw-form button.confirm {
            background: #e53935;
            color: white;
        }

        .withdraw-form button.confirm:hover {
            background: #d32f2f;
            transform: translateY(-1px);
        }

        /* 정책 관련 스타일 */
        .policy-button {
            display: block;
            text-align: center;
            padding: 12px;
            margin-top: 20px;
            background: rgba(255, 255, 255, 0.1);
            color: rgba(255, 255, 255, 0.7);
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 14px;
            border: none;
            width: 100%;
        }

        .policy-button:hover {
            background: rgba(255, 255, 255, 0.15);
            color: white;
        }

        .policy-modal {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.7);
            backdrop-filter: blur(5px);
            z-index: 1100;
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s ease, visibility 0.3s ease;
        }

        .policy-modal.active {
            opacity: 1;
            visibility: visible;
        }

        .policy-content {
            background: rgba(10, 25, 47, 0.95);
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(255, 255, 255, 0.1);
            padding: 2rem;
            width: 90%;
            max-width: 800px;
            max-height: 80vh;
            overflow-y: auto;
            transform: translateY(20px);
            transition: transform 0.3s ease;
        }

        .policy-modal.active .policy-content {
            transform: translateY(0);
        }

        .policy-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .policy-header h2 {
            color: white;
            margin: 0;
            font-size: 1.5rem;
            font-weight: 500;
        }

        .policy-close {
            background: rgba(255, 255, 255, 0.1);
            border: none;
            color: white;
            width: 36px;
            height: 36px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .policy-close:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .policy-tabs {
            display: flex;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            margin-bottom: 1.5rem;
            overflow-x: auto;
            white-space: nowrap;
            padding-bottom: 2px;
        }

        .policy-tab {
            padding: 10px 16px;
            background: none;
            border: none;
            color: rgba(255, 255, 255, 0.7);
            cursor: pointer;
            transition: all 0.2s ease;
            border-bottom: 2px solid transparent;
            font-size: 0.9rem;
        }

        .policy-tab.active {
            color: white;
            border-bottom: 2px solid #5865F2;
        }

        .policy-tab:hover {
            color: white;
        }

        .policy-body {
            color: rgba(255, 255, 255, 0.8);
            line-height: 1.6;
        }

        .policy-section {
            display: none;
            animation: fadeIn 0.3s ease;
        }

        .policy-section.active {
            display: block;
        }

        .policy-section h3 {
            color: white;
            margin-top: 1.5rem;
            margin-bottom: 1rem;
            font-size: 1.2rem;
        }

        .policy-section p {
            margin-bottom: 1rem;
        }

        .policy-section ul {
            margin-bottom: 1rem;
            padding-left: 1.5rem;
        }

        .policy-section li {
            margin-bottom: 0.5rem;
        }

        @media (max-width: 600px) {
            .policy-tab {
                padding: 8px 12px;
                font-size: 0.8rem;
            }
        }
    </style>
</head>
<body>
    <% const currentPath = '/' %>
    <%- include('header.ejs', { currentPath }) %>

    <div class="header">
        <div class="auth-buttons">
            <% if (user) { %>
                <div class="user-info" onclick="toggleUserMenu()">
                    <img src="<%= user.avatar ? `https://cdn.discordapp.com/avatars/${user.id}/${user.avatar}.png` : '/discord.png' %>" alt="프로필" class="user-avatar">
                    <span class="user-name"><%= user.global_name %></span>
                    <span class="user-menu-toggle">▼</span>
                    <div class="user-menu" id="userMenu">
                        <div class="user-menu-item danger" onclick="showWithdrawModal()">
                            <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path>
                                <path d="M13 2v7h7"></path>
                                <path d="M17 21l-5-5 5-5"></path>
                            </svg>
                            회원탈퇴
                        </div>
                        <div class="user-menu-item" onclick="location.href='/auth/logout'">
                            <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path>
                                <polyline points="16 17 21 12 16 7"></polyline>
                                <line x1="21" y1="12" x2="9" y2="12"></line>
                            </svg>
                            로그아웃
                        </div>
                    </div>
                </div>
            <% } else { %>
                <a href="/auth/discord" class="discord-login-button">
                    <img src="/discord.png" alt="Discord">
                    Discord로 로그인
                </a>
            <% } %>
        </div>
    </div>
    <button class="menu-toggle" onclick="toggleSidebar()">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M3 12h18"></path>
            <path d="M3 6h18"></path>
            <path d="M3 18h18"></path>
        </svg>
    </button>
    <div class="sidebar">
        <ul class="month-list">
            <% months.forEach(month => { %>
                <li class="month-item <%= month === selectedMonth ? 'active' : '' %>"
                    onclick="location.href='/?month=<%= month %>'">
                    <%= month.replace(/(\d{4})-(\d{2})/, '$1년 $2월') %>
                </li>
            <% }); %>
            <li class="month-item"></li>
        </ul>
        <button class="policy-button" onclick="showPolicyModal()">이용약관 및 정책</button>
    </div>

    <div class="main-content">
        <% if (selectedMonth) { %>
            <h1 class="month-header">
                <%= selectedMonth.replace(/(\d{4})-(\d{2})/, '$1년 $2월') %>
            </h1>
        <% } %>

        <% if (!groupedImages[selectedMonth] || groupedImages[selectedMonth].length === 0) { %>
            <div class="empty-message">
                이 달의 이미지가 없습니다.
            </div>
        <% } else { %>
            <div class="sort-container">
                <button class="sort-button active asc" onclick="toggleSort(this)">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M12 20V4"/>
                        <path d="M5 11l7-7 7 7"/>
                    </svg>
                    시간순 정렬
                </button>
            </div>
            <div class="image-grid">
                <% groupedImages[selectedMonth].forEach((image, index) => { %>
                    <div class="image-item" data-id="<%= image.id %>">
                        <img src="/uploads/<%= image.filename %>" alt="이미지">
                        <button class="delete-icon" onclick="showDeleteForm(this)">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M3 6h18"></path>
                                <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path>
                                <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path>
                            </svg>
                        </button>
                        <div class="image-comment-count" data-id="<%= image.id %>">
                            <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
                            </svg>
                            <span class="count">0</span>
                        </div>
                        <% if (image.description) { %>
                            <div class="image-description">
                                <%= image.description %>
                            </div>
                        <% } %>
                        <div class="uploader-info compact">
                            <img src="<%= image.avatar %>" alt="업로더 아바타" class="uploader-avatar">
                            <span class="uploader-name"><%= image.displayName || '알 수 없음' %></span>
                        </div>
                    </div>
                <% }); %>
            </div>
        <% } %>
    </div>

    <div class="slider-overlay" id="imageSlider">
        <button class="slider-close" onclick="closeSlider()">×</button>
        <button class="slider-nav-button slider-nav-prev" onclick="showPrevImage()">
            <svg viewBox="0 0 24 24">
                <path d="M15 18l-6-6 6-6"/>
            </svg>
        </button>
        <button class="slider-nav-button slider-nav-next" onclick="showNextImage()">
            <svg viewBox="0 0 24 24">
                <path d="M9 18l6-6-6-6"/>
            </svg>
        </button>
        <div class="slider-uploader-info">
            <img src="" alt="업로더 아바타" class="slider-uploader-avatar">
            <span class="slider-uploader-name"></span>
        </div>
        <div class="slider-content">
            <div class="slider-image-container">
                <img src="" alt="" class="slider-image">
                <div class="description-container">
                    <p class="slider-description"></p>
                    <div class="icon-container">
                        <button class="edit-icon" onclick="showEditForm()">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"></path>
                            </svg>
                        </button>
                        <button class="comments-toggle" onclick="toggleComments()">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
                            </svg>
                            <span class="comment-count">0</span>
                        </button>
                    </div>
                </div>
            </div>

            <div class="comments-panel">
                <div class="comments-header">
                    <span class="comments-count">댓글 0개</span>
                    <button class="comments-close" onclick="toggleComments()">
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M18 6L6 18"></path>
                            <path d="M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
                <div class="comments-list">
                    <!-- 댓글이 여기에 동적으로 추가됩니다 -->
                </div>
                <div class="comment-form">
                    <textarea class="comment-input" placeholder="댓글을 입력하세요..." rows="3"></textarea>
                    <button class="comment-submit" onclick="submitComment()" disabled>댓글 작성</button>
                </div>
            </div>

            <div class="edit-form">
                <input type="password" id="edit-password" placeholder="비밀번호를 입력하세요">
                <textarea id="edit-description" placeholder="새로운 설명을 입력하세요"></textarea>
                <div class="edit-buttons">
                    <button onclick="updateDescription()">저장</button>
                    <button onclick="cancelEdit()">취소</button>
                </div>
            </div>
        </div>
    </div>

    <!-- 회원탈퇴 모달 -->
    <div class="withdraw-modal" id="withdrawModal">
        <div class="withdraw-form">
            <h3>회원탈퇴</h3>
            <p>정말 탈퇴하시겠습니까? 탈퇴하면 작성한 댓글 및 모든 정보가 삭제됩니다. 이 작업은 되돌릴 수 없습니다.</p>
            <div class="buttons">
                <button class="cancel" onclick="closeWithdrawModal()">취소</button>
                <button class="confirm" onclick="withdrawUser()">탈퇴하기</button>
            </div>
        </div>
    </div>

    <!-- 이용약관 및 정책 모달 -->
    <div class="policy-modal" id="policyModal">
        <div class="policy-content">
            <div class="policy-header">
                <h2>이용약관 및 정책</h2>
                <button class="policy-close" onclick="closePolicyModal()">×</button>
            </div>
            <div class="policy-tabs">
                <button class="policy-tab active" onclick="switchPolicyTab('terms')">서비스 이용약관</button>
                <button class="policy-tab" onclick="switchPolicyTab('cookie')">쿠키 정책</button>
                <button class="policy-tab" onclick="switchPolicyTab('email')">이메일 수집 거부</button>
                <button class="policy-tab" onclick="switchPolicyTab('copyright')">저작권 정책</button>
                <button class="policy-tab" onclick="switchPolicyTab('marketing')">마케팅 정보 수신</button>
                <button class="policy-tab" onclick="switchPolicyTab('privacy')">개인정보 제3자 제공</button>
            </div>
            <div class="policy-body">
                <div id="terms" class="policy-section active">
                    <h3>서비스 이용약관</h3>
                    <p>이 약관은 별단 추억갤러리 서비스 이용에 관한 기본적인 사항을 규정합니다.</p>
                    
                    <h3>제1조 (목적)</h3>
                    <p>이 약관은 별단 추억갤러리(이하 "갤러리")에서 제공하는 서비스 이용조건 및 절차, 회원과 갤러리 간의 권리, 의무, 책임사항을 규정함을 목적으로 합니다.</p>
                    
                    <h3>제2조 (가입 및 탈퇴)</h3>
                    <p>1. 회원 가입은 Discord 계정을 통해 이루어지며, 별단 길드 멤버만 서비스를 이용할 수 있습니다.</p>
                    <p>2. 회원은 언제든지 자신의 계정에서 "회원탈퇴" 기능을 이용하여 탈퇴할 수 있습니다. 탈퇴 시 회원이 작성한 모든 댓글과 개인정보는 즉시 삭제됩니다.</p>
                    
                    <h3>제3조 (서비스 이용 제한)</h3>
                    <p>다음과 같은 경우 서비스 이용이 제한될 수 있습니다:</p>
                    <ul>
                        <li>타인의 권리를 침해하거나 명예를 훼손하는 내용을 게시한 경우</li>
                        <li>불법적인 내용을 게시하는 경우</li>
                        <li>서비스의 안정적 운영을 방해하는 경우</li>
                    </ul>
                    
                    <h3>제4조 (면책 조항)</h3>
                    <p>갤러리는 천재지변, 전쟁, 기간통신사업자의 서비스 중단 등 불가항력적인 사유로 인한 서비스 중단에 대해 책임을 지지 않습니다.</p>
                    
                    <h3>제5조 (분쟁 해결)</h3>
                    <p>서비스 이용과 관련하여 발생한 분쟁은 대한민국 법률에 따라 규율되며, 소송이 제기될 경우 관할법원은 서울중앙지방법원으로 합니다.</p>
                </div>
                
                <div id="cookie" class="policy-section">
                    <h3>쿠키 정책</h3>
                    <p>별단 추억갤러리는 서비스 제공을 위해 쿠키와 로컬 스토리지를 사용합니다.</p>
                    
                    <h3>1. 쿠키란?</h3>
                    <p>쿠키는 웹사이트가 사용자의 브라우저에 저장하는 작은 텍스트 파일로, 사용자를 식별하고 맞춤화된 서비스를 제공하는 데 사용됩니다.</p>
                    
                    <h3>2. 쿠키 사용 목적</h3>
                    <p>당사는 다음과 같은 목적으로 쿠키를 사용합니다:</p>
                    <ul>
                        <li>로그인 상태 유지</li>
                        <li>사용자 세션 관리</li>
                        <li>서비스 사용 데이터 수집 및 분석</li>
                    </ul>
                    
                    <h3>3. 쿠키 설정 및 거부 방법</h3>
                    <p>대부분의 브라우저는 쿠키를 허용하도록 기본 설정되어 있지만, 브라우저 설정을 변경하여 모든 쿠키를 허용하거나 차단하거나 쿠키가 설정될 때 알림을 받을 수 있습니다.</p>
                    <p>쿠키 설정을 거부하는 경우 서비스 이용에 어려움이 있을 수 있습니다.</p>
                </div>
                
                <div id="email" class="policy-section">
                    <h3>이메일 무단 수집 거부</h3>
                    <p>본 웹사이트에 게시된 이메일 주소가 전자우편 수집 프로그램이나 그 밖의 기술적 장치를 이용하여 무단으로 수집되는 것을 거부합니다.</p>
                    <p>이를 위반하여 이메일 주소를 수집하는 행위는 '정보통신망 이용촉진 및 정보보호 등에 관한 법률'에 의해 금지되어 있으며, 위반 시 법적 조치를 취할 수 있습니다.</p>
                </div>
                
                <div id="copyright" class="policy-section">
                    <h3>저작권 및 지식재산권 정책</h3>
                    <p>별단 추억갤러리에 게시된 모든 콘텐츠의 저작권은 다음과 같이 규정됩니다.</p>
                    
                    <h3>1. 서비스 콘텐츠의 저작권</h3>
                    <p>갤러리에서 제공하는 서비스, 이미지, 디자인, 로고 등 모든 콘텐츠에 대한 저작권은 갤러리에 귀속됩니다.</p>
                    
                    <h3>2. 이용자 콘텐츠의 저작권</h3>
                    <p>이용자가 갤러리에 게시한 콘텐츠의 저작권은 해당 이용자에게 있지만, 갤러리는 서비스 운영과 홍보 등을 위해 해당 콘텐츠를 이용할 수 있는 권리를 가집니다.</p>
                    
                    <h3>3. 저작권 침해 신고</h3>
                    <p>저작권 침해가 우려되는 콘텐츠를 발견하신 경우, 관리자에게 신고해 주시기 바랍니다. 해당 콘텐츠는 검토 후 조치됩니다.</p>
                </div>
                
                <div id="marketing" class="policy-section">
                    <h3>광고·제휴·마케팅 정보 수신 동의</h3>
                    <p>별단 추억갤러리는 회원에게 다양한 마케팅 정보를 제공할 수 있습니다.</p>
                    
                    <h3>1. 마케팅 정보의 범위</h3>
                    <p>갤러리는 새로운 서비스, 이벤트, 프로모션 등에 관한 정보를 전송할 수 있습니다.</p>
                    
                    <h3>2. 마케팅 정보 전송 수단</h3>
                    <p>마케팅 정보는 이메일, Discord 알림 등을 통해 전송될 수 있습니다.</p>
                    
                    <h3>3. 마케팅 정보 수신 거부 방법</h3>
                    <p>마케팅 정보 수신은 선택 사항이며, 언제든지 수신을 거부할 수 있습니다. 수신 거부를 원하시는 경우 관리자에게 문의해 주시기 바랍니다.</p>
                </div>
                
                <div id="privacy" class="policy-section">
                    <h3>개인정보 제3자 제공 및 위탁 처리 동의</h3>
                    <p>별단 추억갤러리는 서비스 제공을 위해 필요한 경우 개인정보를 제3자에게 제공하거나 위탁 처리할 수 있습니다.</p>
                    
                    <h3>1. 개인정보 제3자 제공</h3>
                    <p>갤러리는 사용자의 동의 없이 개인정보를 제3자에게 제공하지 않습니다. 다만, 법률에 의해 요구되는 경우는 예외로 합니다.</p>
                    
                    <h3>2. 개인정보 위탁 처리</h3>
                    <p>갤러리는 다음과 같은 업체에 개인정보 처리를 위탁할 수 있습니다:</p>
                    <ul>
                        <li>Discord (사용자 인증)</li>
                        <li>호스팅 서비스 제공업체 (서버 관리)</li>
                    </ul>
                    
                    <h3>3. 보유 기간</h3>
                    <p>개인정보는 회원 탈퇴 시 즉시 삭제됩니다. 단, 관련 법령에 따라 보존이 필요한 경우에는 해당 기간 동안 보관될 수 있습니다.</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        let currentImageIndex = 0;
        let images = [];
        let currentImageId = null;

        // 초기 로딩시 애니메이션 적용
        document.querySelectorAll('.image-item').forEach((item, index) => {
            item.style.setProperty('--index', index);
            item.classList.add('with-animation');
            const imageData = {
                id: item.dataset.id,
                src: item.querySelector('img').src,
                description: item.querySelector('.image-description')?.textContent?.trim() || '',
                displayName: item.querySelector('.uploader-name')?.textContent || '알 수 없음',
                avatar: item.querySelector('.uploader-avatar')?.src || ''
            };
            images.push(imageData);

            // 이미지 클릭 이벤트를 이미지 요소에 직접 추가
            const imgElement = item.querySelector('img');
            imgElement.addEventListener('click', function() {
                currentImageIndex = index;
                openSlider(imageData);
            });
            
            // 댓글 수 로드
            loadImageCommentCount(item.dataset.id);
        });

        function showPrevImage() {
            if (currentImageIndex > 0) {
                currentImageIndex--;
                const image = images[currentImageIndex];
                updateSliderContent(image);
            }
        }

        function showNextImage() {
            if (currentImageIndex < images.length - 1) {
                currentImageIndex++;
                const image = images[currentImageIndex];
                updateSliderContent(image);
            }
        }

        function updateCommentCount(imageId) {
            fetch(`/api/comments/${imageId}`)
                .then(response => response.json())
                .then(data => {
                    const commentCount = document.querySelector('.comment-count');
                    let totalComments = 0;
                    
                    function countComments(comments) {
                        comments.forEach(comment => {
                            totalComments++;
                            if (comment.replies) {
                                countComments(comment.replies);
                            }
                        });
                    }
                    
                    countComments(data);
                    commentCount.textContent = totalComments;
                })
                .catch(error => {
                    console.error('댓글 수 로딩 중 오류:', error);
                });
        }

        function openSlider(imageData) {
            currentImageId = imageData.id;
            const slider = document.getElementById('imageSlider');
            const image = slider.querySelector('.slider-image');
            const descriptionElement = slider.querySelector('.slider-description');
            const uploaderInfo = slider.querySelector('.slider-uploader-info');
            const uploaderAvatar = uploaderInfo.querySelector('.slider-uploader-avatar');
            const uploaderName = uploaderInfo.querySelector('.slider-uploader-name');
            
            // 댓글 패널 초기화
            const sliderContent = slider.querySelector('.slider-content');
            const commentsPanel = slider.querySelector('.comments-panel');
            sliderContent.classList.remove('with-comments');
            commentsPanel.classList.remove('active');
            slider.classList.remove('with-comments-open');
            
            // 이미지와 설명 업데이트
            image.src = imageData.src;
            descriptionElement.textContent = imageData.description || '설명이 없습니다.';
            
            // 업로더 정보 표시
            uploaderInfo.style.display = 'flex';
            uploaderName.textContent = imageData.displayName;
            uploaderAvatar.src = imageData.avatar;
            
            // 슬라이더 표시
            slider.style.display = 'flex';
            document.body.style.overflow = 'hidden';
            
            // 버튼 상태 업데이트
            document.querySelector('.slider-nav-prev').style.visibility = 
                currentImageIndex === 0 ? 'hidden' : 'visible';
            document.querySelector('.slider-nav-next').style.visibility = 
                currentImageIndex === images.length - 1 ? 'hidden' : 'visible';
            
            // 애니메이션 적용
            requestAnimationFrame(() => {
                slider.classList.add('active');
            });
            
            // 댓글 수 업데이트
            updateCommentCount(currentImageId);
        }

        function updateSliderContent(image) {
            const sliderImage = document.querySelector('.slider-image');
            const descriptionElement = document.querySelector('.slider-description');
            const uploaderInfo = document.querySelector('.slider-uploader-info');
            const uploaderAvatar = uploaderInfo.querySelector('.slider-uploader-avatar');
            const uploaderName = uploaderInfo.querySelector('.slider-uploader-name');
            
            sliderImage.src = image.src;
            descriptionElement.textContent = image.description || '설명이 없습니다.';
            currentImageId = image.id;

            // 업로더 정보 표시
            uploaderInfo.style.display = 'flex';
            uploaderName.textContent = image.displayName;
            uploaderAvatar.src = image.avatar;

            // 버튼 상태 업데이트
            document.querySelector('.slider-nav-prev').style.visibility = 
                currentImageIndex === 0 ? 'hidden' : 'visible';
            document.querySelector('.slider-nav-next').style.visibility = 
                currentImageIndex === images.length - 1 ? 'hidden' : 'visible';
                
            // 댓글 수 업데이트
            updateCommentCount(currentImageId);
            
            // 댓글 패널이 열려있으면 댓글 목록도 갱신
            const commentsPanel = document.querySelector('.comments-panel');
            if (commentsPanel.classList.contains('active')) {
                loadComments(currentImageId);
            }
        }

        function closeSlider() {
            const slider = document.getElementById('imageSlider');
            slider.classList.remove('active');
            
            // 애니메이션이 끝난 후 완전히 숨김
            setTimeout(() => {
                slider.style.display = 'none';
                document.body.style.overflow = 'auto';
            }, 400); // 트랜지션 시간과 동일하게 설정
        }

        function showEditForm() {
            const form = document.querySelector('.edit-form');
            form.classList.add('active');
            const description = document.querySelector('.slider-description').textContent.trim();
            document.getElementById('edit-description').value = description;
        }

        function cancelEdit() {
            const form = document.querySelector('.edit-form');
            form.classList.remove('active');
            document.getElementById('edit-password').value = '';
            document.getElementById('edit-description').value = '';
        }

        async function updateDescription() {
            const password = document.getElementById('edit-password').value;
            const description = document.getElementById('edit-description').value.trim();

            try {
                const response = await fetch(`/api/images/${currentImageId}/description`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ password, description })
                });

                const data = await response.json();

                if (!response.ok) {
                    alert(data.error);
                    return;
                }

                document.querySelector('.slider-description').textContent = description;
                cancelEdit();
                alert('설명이 성공적으로 수정되었습니다.');
            } catch (error) {
                console.error('Error:', error);
                alert('설명 수정 중 오류가 발생했습니다.');
            }
        }

        document.addEventListener('keydown', (e) => {
            const slider = document.getElementById('imageSlider');
            if (slider.classList.contains('active')) {
                switch(e.key) {
                    case 'Escape':
                        closeSlider();
                        break;
                    case 'ArrowLeft':
                        showPrevImage();
                        break;
                    case 'ArrowRight':
                        showNextImage();
                        break;
                }
            }
        });

        function toggleSort(button) {
            const isAsc = button.classList.contains('asc');
            button.classList.toggle('asc');
            button.classList.toggle('desc');
            
            const imageGrid = document.querySelector('.image-grid');
            const imageItems = Array.from(imageGrid.children);
            
            // 정렬 전에 애니메이션 클래스 제거
            imageItems.forEach(item => {
                item.classList.remove('with-animation');
            });
            
            imageItems.sort((a, b) => {
                const aId = parseInt(a.dataset.id);
                const bId = parseInt(b.dataset.id);
                return isAsc ? bId - aId : aId - bId;
            });
            
            imageItems.forEach(item => imageGrid.appendChild(item));
            
            // 이미지 배열도 정렬
            images.sort((a, b) => {
                const aId = parseInt(a.id);
                const bId = parseInt(b.id);
                return isAsc ? bId - aId : aId - bId;
            });
        }

        function showDeleteForm(button) {
            const imageItem = button.closest('.image-item');
            currentImageId = imageItem.dataset.id;
            
            // 오버레이 생성
            const overlay = document.createElement('div');
            overlay.className = 'delete-form-overlay';
            document.body.appendChild(overlay);
            
            // 모달 폼 생성
            const form = document.createElement('div');
            form.className = 'delete-form';
            form.innerHTML = `
                <h3>이미지 삭제</h3>
                <p>이미지를 삭제하려면 비밀번호를 입력하세요.</p>
                <input type="password" id="delete-password" placeholder="비밀번호를 입력하세요">
                <div class="buttons">
                    <button class="cancel" onclick="cancelDelete()">취소</button>
                    <button class="confirm" onclick="deleteImage()">삭제</button>
                </div>
            `;
            
            document.body.appendChild(form);
            
            // 애니메이션을 위해 약간의 지연 후 active 클래스 추가
            setTimeout(() => {
                overlay.classList.add('active');
                form.classList.add('active');
            }, 10);
        }

        function cancelDelete() {
            const form = document.querySelector('.delete-form');
            const overlay = document.querySelector('.delete-form-overlay');
            
            if (form) {
                form.classList.remove('active');
                overlay.classList.remove('active');
                
                // 애니메이션이 끝난 후 요소 제거
                setTimeout(() => {
                    form.remove();
                    overlay.remove();
                }, 300);
            }
        }

        async function deleteImage() {
            const password = document.getElementById('delete-password').value;
            
            if (password !== 'star') {
                alert('비밀번호가 올바르지 않습니다.');
                return;
            }
            
            try {
                const response = await fetch(`/api/images/${currentImageId}`, {
                    method: 'DELETE'
                });
                
                if (!response.ok) {
                    console.log(response);
                    throw new Error('이미지 삭제 중 오류가 발생했습니다.');
                }
                
                // 이미지 아이템 제거
                const imageItem = document.querySelector(`.image-item[data-id="${currentImageId}"]`);
                if (imageItem) {
                    imageItem.remove();
                }
                
                // 폼 제거
                cancelDelete();
                
                alert('이미지가 성공적으로 삭제되었습니다.');
            } catch (error) {
                console.error('Error:', error);
                alert('이미지 삭제 중 오류가 발생했습니다.');
            }
        }

        function toggleSidebar() {
            const sidebar = document.querySelector('.sidebar');
            sidebar.classList.toggle('active');
        }

        // 사이드바 외부 클릭 시 닫기
        document.addEventListener('click', (e) => {
            const sidebar = document.querySelector('.sidebar');
            const menuToggle = document.querySelector('.menu-toggle');
            if (!sidebar.contains(e.target) && !menuToggle.contains(e.target)) {
                sidebar.classList.remove('active');
            }
        });

        function toggleComments() {
            const sliderContent = document.querySelector('.slider-content');
            const commentsPanel = document.querySelector('.comments-panel');
            const sliderOverlay = document.getElementById('imageSlider');
            
            sliderContent.classList.toggle('with-comments');
            commentsPanel.classList.toggle('active');
            sliderOverlay.classList.toggle('with-comments-open');

            // 댓글창이 닫힐 때 스크롤 초기화
            if (!commentsPanel.classList.contains('active')) {
                setTimeout(() => {
                    sliderOverlay.scrollLeft = 0;
                }, 300);
            }

            if (commentsPanel.classList.contains('active')) {
                loadComments(currentImageId);
            }
        }

        function loadComments(imageId) {
            fetch(`/api/comments/${imageId}`)
                .then(response => response.json())
                .then(data => {
                    const commentsList = document.querySelector('.comments-list');
                    const commentsCount = document.querySelector('.comments-count');
                    const commentCount = document.querySelector('.comment-count');
                    commentsList.innerHTML = '';
                    
                    let totalComments = 0;
                    function countComments(comments) {
                        comments.forEach(comment => {
                            totalComments++;
                            if (comment.replies) {
                                countComments(comment.replies);
                            }
                        });
                    }
                    countComments(data);
                    commentsCount.textContent = `댓글 ${totalComments}개`;
                    commentCount.textContent = totalComments;

                    function renderComment(comment, isReply = false) {
                        const div = document.createElement('div');
                        div.className = `comment ${isReply ? 'reply' : ''}`;
                        div.innerHTML = `
                            <div class="comment-header">
                                <img src="${comment.avatar || '/discord.png'}" alt="프로필" class="comment-avatar">
                                <span class="comment-author">${comment.displayName}</span>
                            </div>
                            <div class="comment-content">${comment.content}</div>
                            <div class="comment-actions">
                                <button class="comment-action" onclick="showReplyForm(${comment.id})">답글</button>
                                ${comment.userId === '<%= user?.id %>' ? 
                                    `<button class="comment-action" onclick="deleteComment(${comment.id})">삭제</button>` : 
                                    ''}
                            </div>
                            <div class="reply-form" id="reply-form-${comment.id}">
                                <textarea class="comment-input" placeholder="답글을 입력하세요..."></textarea>
                                <button class="comment-submit" onclick="submitReply(${comment.id})">답글 작성</button>
                            </div>
                            ${comment.replies?.length ? '<div class="replies">' + 
                                comment.replies.map(reply => renderComment(reply, true)).join('') + 
                                '</div>' : ''}
                        `;
                        return div.outerHTML;
                    }

                    data.forEach(comment => {
                        commentsList.innerHTML += renderComment(comment);
                    });
                })
                .catch(error => {
                    console.error('댓글 로딩 중 오류:', error);
                });
        }

        function submitComment() {
            const input = document.querySelector('.comment-form .comment-input');
            const content = input.value.trim();
            if (!content) return;

            fetch('/api/comments', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    imageId: currentImageId,
                    content: content
                })
            })
            .then(async response => {
                const data = await response.json();
                if (!response.ok) {
                    throw new Error(data.error);
                }
                input.value = '';
                loadComments(currentImageId);
            })
            .catch(error => {
                console.error('Error:', error);
                alert(error.message);
            });
        }

        function showReplyForm(commentId) {
            const form = document.getElementById(`reply-form-${commentId}`);
            form.style.display = form.style.display === 'block' ? 'none' : 'block';
        }

        function submitReply(commentId) {
            const form = document.getElementById(`reply-form-${commentId}`);
            const input = form.querySelector('.comment-input');
            const content = input.value.trim();
            if (!content) return;

            fetch('/api/comments', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    imageId: currentImageId,
                    content: content,
                    parentId: commentId
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('답글 작성 중 오류가 발생했습니다.');
                }
                input.value = '';
                form.style.display = 'none';
                loadComments(currentImageId);
            })
            .catch(error => {
                console.error('Error:', error);
                alert(error.message);
            });
        }

        function deleteComment(commentId) {
            if (!confirm('댓글을 삭제하시겠습니까?')) return;

            fetch(`/api/comments/${commentId}`, {
                method: 'DELETE'
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('댓글 삭제 중 오류가 발생했습니다.');
                }
                loadComments(currentImageId);
            })
            .catch(error => {
                console.error('Error:', error);
                alert(error.message);
            });
        }

        // 댓글 입력 필드 이벤트 리스너
        document.querySelector('.comment-form .comment-input').addEventListener('input', function() {
            document.querySelector('.comment-form .comment-submit').disabled = !this.value.trim();
        });

        // 이미지 리스트의 댓글 수 로드 함수
        function loadImageCommentCount(imageId) {
            fetch(`/api/comments/${imageId}`)
                .then(response => response.json())
                .then(data => {
                    const commentCountElement = document.querySelector(`.image-comment-count[data-id="${imageId}"] .count`);
                    if (!commentCountElement) return;
                    
                    let totalComments = 0;
                    function countComments(comments) {
                        comments.forEach(comment => {
                            totalComments++;
                            if (comment.replies) {
                                countComments(comment.replies);
                            }
                        });
                    }
                    
                    countComments(data);
                    commentCountElement.textContent = totalComments;
                    
                    // 댓글이 없으면 숨김
                    const commentIcon = document.querySelector(`.image-comment-count[data-id="${imageId}"]`);
                    if (totalComments === 0) {
                        commentIcon.style.opacity = '0';
                    } else {
                        commentIcon.style.opacity = '1';
                    }
                })
                .catch(error => {
                    console.error('댓글 수 로딩 중 오류:', error);
                });
        }

        // 유저 메뉴 토글 함수
        function toggleUserMenu() {
            const userMenu = document.getElementById('userMenu');
            const userInfo = document.querySelector('.user-info');
            
            userMenu.classList.toggle('active');
            userInfo.classList.toggle('active');
            
            // 메뉴 외부 클릭시 닫기
            event.stopPropagation();
            document.addEventListener('click', function closeMenu(e) {
                if (!userMenu.contains(e.target) && e.target.closest('.user-info') === null) {
                    userMenu.classList.remove('active');
                    userInfo.classList.remove('active');
                    document.removeEventListener('click', closeMenu);
                }
            });
        }

        // 회원탈퇴 모달 표시
        function showWithdrawModal() {
            const withdrawModal = document.getElementById('withdrawModal');
            withdrawModal.classList.add('active');
            // 이벤트 전파 중지
            event.stopPropagation();
        }

        // 회원탈퇴 모달 닫기
        function closeWithdrawModal() {
            const withdrawModal = document.getElementById('withdrawModal');
            withdrawModal.classList.remove('active');
        }

        // 회원탈퇴 실행
        function withdrawUser() {
            if (confirm('정말로 탈퇴하시겠습니까? 이 작업은 되돌릴 수 없습니다.')) {
                fetch('/api/users/withdraw', {
                    method: 'DELETE',
                    credentials: 'same-origin'
                })
                .then(response => {
                    if (response.ok) {
                        alert('회원탈퇴가 완료되었습니다.');
                        window.location.href = '/';
                    } else {
                        return response.json().then(data => {
                            throw new Error(data.error || '회원탈퇴 처리 중 오류가 발생했습니다.');
                        });
                    }
                })
                .catch(error => {
                    alert(error.message);
                    console.error('회원탈퇴 오류:', error);
                });
            }
        }

        // ESC 키로 모달 닫기
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                const withdrawModal = document.getElementById('withdrawModal');
                if (withdrawModal.classList.contains('active')) {
                    closeWithdrawModal();
                }
            }
        });

        // 모달 외부 클릭시 닫기
        document.getElementById('withdrawModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeWithdrawModal();
            }
        });

        // 이용약관 모달 표시
        function showPolicyModal() {
            const policyModal = document.getElementById('policyModal');
            policyModal.classList.add('active');
            // 스크롤 방지
            document.body.style.overflow = 'hidden';
        }

        // 이용약관 모달 닫기
        function closePolicyModal() {
            const policyModal = document.getElementById('policyModal');
            policyModal.classList.remove('active');
            // 스크롤 허용
            document.body.style.overflow = 'auto';
        }

        // 이용약관 탭 전환
        function switchPolicyTab(tabId) {
            // 모든 탭 비활성화
            document.querySelectorAll('.policy-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // 모든 섹션 숨기기
            document.querySelectorAll('.policy-section').forEach(section => {
                section.classList.remove('active');
            });
            
            // 선택한 탭 활성화
            document.querySelector(`.policy-tab[onclick="switchPolicyTab('${tabId}')"]`).classList.add('active');
            
            // 선택한 섹션 표시
            document.getElementById(tabId).classList.add('active');
        }

        // ESC 키로 모달 닫기
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                const withdrawModal = document.getElementById('withdrawModal');
                const policyModal = document.getElementById('policyModal');
                
                if (withdrawModal.classList.contains('active')) {
                    closeWithdrawModal();
                }
                
                if (policyModal.classList.contains('active')) {
                    closePolicyModal();
                }
            }
        });

        // 모달 외부 클릭시 닫기
        document.getElementById('withdrawModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeWithdrawModal();
            }
        });
        
        document.getElementById('policyModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closePolicyModal();
            }
        });
    </script>
</body>
</html> 