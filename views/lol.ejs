<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
  <title>롤 랜덤 챔피언 뽑기</title>
  <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
  <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>

  <style>
    :root {
      --bg-color: #ffffff;
      --text-color: #333333;
      --border-color: #cccccc;
      --seat-bg: #f0f0f0;
      --seat-taken-bg: #d0d0d0;
      --container-bg: #f8f8f8;
      --game-status-bg: #f8f8f8;
      --nickname-form-bg: #f8f8f8;
      --champion-list-bg: #f8f8f8;
      --input-bg: #ffffff;
      --button-bg: #4CAF50;
      --button-hover-bg: #45a049;
      --button-disabled-bg: #cccccc;
      --team1-border: #ff0000;
      --team2-border: #0000ff;
      --waiting-border: #cccccc;
      --modal-bg: rgba(0, 0, 0, 0.7);
      --modal-content-bg: #ffffff;
      --win-color: #4CAF50;
      --lose-color: #f44336;
    }

    [data-theme="dark"] {
      --bg-color: #1a1a2e;
      --text-color: #ffffff;
      --border-color: #4a4a6e;
      --seat-bg: #2a2a4e;
      --seat-taken-bg: #3a3a5e;
      --container-bg: #2a2a4e;
      --game-status-bg: #1a1a2e;
      --nickname-form-bg: #1a1a2e;
      --champion-list-bg: #1a1a2e;
      --input-bg: #2a2a4e;
      --button-bg: #3a3a5e;
      --button-hover-bg: #4a4a6e;
      --button-disabled-bg: #2a2a4e;
      --team1-border: #ff5f5f;
      --team2-border: #5f5fff;
      --waiting-border: #4a4a6e;
      --modal-bg: rgba(0, 0, 0, 0.9);
      --modal-content-bg: #2a2a4e;
      --win-color: #4CAF50;
      --lose-color: #f44336;
    }

    body {
      background-color: var(--bg-color);
      color: var(--text-color);
      transition: all 0.3s ease;
    }

    [data-theme="dark"] body {
      background-image: radial-gradient(circle at 50% 50%, #1a1a2e 0%, #0a0a1e 100%);
    }

    .container { 
      max-width: 1000px; 
      margin: 20px auto; 
      padding: 20px;
      background-color: var(--container-bg);
      border-radius: 10px;
      box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }

    [data-theme="dark"] .container {
      box-shadow: 0 0 20px rgba(255,255,255,0.05);
    }

    .theme-switch {
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 1000;
      background: none;
      border: none;
      font-size: 24px;
      cursor: pointer;
      color: var(--text-color);
      padding: 10px;
      border-radius: 50%;
      width: 50px;
      height: 50px;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.3s ease;
    }

    .theme-switch:hover {
      background-color: rgba(255,255,255,0.1);
    }

    .seat {
      width: 100%; 
      height: 80px; 
      margin: 5px 0;
      display: flex; 
      flex-direction: column; 
      justify-content: center; 
      align-items: center;
      background: var(--seat-bg); 
      cursor: pointer; 
      user-select: none;
      border-radius: 5px;
      position: relative;
      transition: all 0.3s ease;
    }

    .seat.taken { 
      background: var(--seat-taken-bg);
    }

    .seat.team1 { 
      border: 2px solid var(--team1-border);
    }

    .seat.team2 { 
      border: 2px solid var(--team2-border);
    }

    .seat.waiting { 
      border: 2px solid var(--waiting-border);
    }

    [data-theme="dark"] .seat {
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }

    [data-theme="dark"] .seat:hover {
      background: var(--seat-taken-bg);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
    }

    [data-theme="dark"] .seat.taken:hover {
      background: var(--button-bg);
    }

    [data-theme="dark"] .seat .select-btn {
      background: var(--button-bg);
      border: 1px solid var(--border-color);
      color: var(--text-color);
    }

    [data-theme="dark"] .seat .select-btn:hover {
      background: var(--button-hover-bg);
    }

    [data-theme="dark"] .seat div {
      color: var(--text-color);
    }

    [data-theme="dark"] #team1Seats,
    [data-theme="dark"] #team2Seats,
    [data-theme="dark"] #waitingSeats {
      background: var(--container-bg);
      border-radius: 5px;
      padding: 10px;
      margin: 5px 0;
    }

    #team1Seats, #team2Seats, #waitingSeats {
      background: var(--container-bg);
      border-radius: 5px;
      padding: 10px;
      margin: 5px 0;
      transition: all 0.3s ease;
    }

    .team {
      border-color: var(--border-color);
      background-color: var(--container-bg);
    }

    .waiting-room {
      border-color: var(--border-color);
      background-color: var(--container-bg);
    }

    [data-theme="dark"] .team,
    [data-theme="dark"] .waiting-room {
      border: 1px solid var(--border-color);
      background-color: rgba(42, 42, 78, 0.8);
    }

    [data-theme="dark"] .controls button {
      background-color: #3a3a5e;
      color: white;
      border: 1px solid var(--border-color);
    }

    [data-theme="dark"] .controls button:disabled {
      background-color: #2a2a4e;
      color: #666;
    }

    [data-theme="dark"] .champion-display {
      border: 2px solid var(--border-color);
    }

    .room-form { margin-bottom: 20px; }
    .teams-container { 
      display: flex; 
      justify-content: space-between; 
      margin: 20px 0;
      gap: 20px;
      flex-wrap: wrap;
    }
    .team { 
      width: 30%; 
      padding: 10px; 
      border: 1px solid #ccc; 
      border-radius: 5px;
      flex: 1;
      min-width: 200px;
    }
    
    /* 밴 챔피언 섹션이 숨겨졌을 때 팀 섹션 스타일 */
    .teams-container.no-ban .team {
      width: 45%;
      flex: 0 0 45%;
    }
    
    .team h3 {
      text-align: left;
    }
    .team:nth-child(2) h3 {
      text-align: right;
    }
    .team-ban-slots {
      display: flex;
      justify-content: space-between;
      margin-bottom: 10px;
      gap: 5px;
    }
    .ban-slot {
      width: 35px;
      height: 35px;
      border-radius: 50%;
      border: 2px solid #f44336;
      background-color: var(--seat-bg);
      display: flex;
      align-items: center;
      justify-content: center;
      overflow: hidden;
    }
    .ban-slot img {
      width: 100%; 
      height: 100%;
      object-fit: cover;
      opacity: 0.7;
    }
    .ban-slot.empty {
      position: relative;
    }
    .ban-slot.empty::after {
      content: "";
      position: absolute;
      width: 70%;
      height: 2px;
      background-color: #f44336;
      transform: rotate(45deg);
    }
    .ban-slot.empty::before {
      content: "";
      position: absolute;
      width: 70%;
      height: 2px;
      background-color: #f44336;
      transform: rotate(-45deg);
    }
    .waiting-room { 
      width: 99%; 
      padding: 10px; 
      border: 1px solid #ccc; 
      border-radius: 5px; 
      margin: 20px 0;
      background: #f8f8f8;
    }
    .waiting-room h3 {
      margin-top: 0;
      color: #333;
    }
    #waitingSeats {
      display: grid;
      grid-template-columns: repeat(5, 1fr);
      gap: 10px;
      margin-top: 10px;
    }
    .seat .select-btn {
      position: absolute;
      bottom: 5px;
      left: 50%;
      transform: translateX(-50%);
      padding: 2px 8px;
      background: #4CAF50;
      color: white;
      border: none;
      border-radius: 3px;
      cursor: pointer;
      font-size: 12px;
      display: none;
    }
    .seat:not(.taken):hover .select-btn {
      display: block;
    }
    .seat .player-info {
      text-align: center;
      font-size: 12px;
      display: flex;
      flex-direction: row;
      height: 100%;
      justify-content: space-between;
      align-items: center;
      width: 100%;
      padding: 0 15px;
    }
    .seat.team1 .player-info {
      flex-direction: row;
    }
    .seat.team2 .player-info {
      flex-direction: row-reverse;
    }
    .seat .player-name {
      font-weight: bold;
      flex: 1;
      text-align: center;
      font-size: 16px;
      margin: 0 10px;
    }
    .seat .player-name.self {
      color: #4CAF50; /* 초록색 */
      font-weight: bold;
    }
    .seat .player-name.host {
      color: #ff0000; /* 빨간색 */
      font-weight: bold;
    }
    .seat .champion-display { 
      font-weight: bold; 
      color: #333;
      margin: 5px 0;
      width: 48px;
      height: 48px;
      border-radius: 50%;
      overflow: hidden;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 5px;
    }
    .seat .champion-display img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    .seat .champion-display.unknown {
      background-color: var(--seat-bg);
      color: var(--text-color);
      font-size: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .seat .reroll-count { 
      color: #666; 
      font-size: 0.8em;
      margin-top: 5px;
    }
    .seat .reroll-btn {
      margin-top: auto;
      padding: 2px 8px;
      background: #2196F3;
      color: white;
      border: none;
      border-radius: 3px;
      cursor: pointer;
      font-size: 12px;
    }
    .seat .reroll-btn:disabled {
      background: #ccc;
      cursor: not-allowed;
    }
    .controls {
      margin: 20px 0;
      text-align: center;
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 10px;
    }
    .controls button { 
      margin: 0 10px; 
      padding: 10px 20px;
      font-size: 16px;
      border-radius: 5px;
      cursor: pointer;
      transition: all 0.3s ease;
    }
    .controls button:disabled {
      background-color: var(--button-disabled-bg);
      cursor: not-allowed;
      opacity: 0.7;
    }
    #rerollBtn {
      background-color: #2196F3;
      color: white;
      border: none;
    }
    #rerollBtn:not(:disabled):hover {
      background-color: #1976D2;
    }
    .reroll-count-display {
      color: #666;
      font-size: 14px;
      margin-left: 5px;
    }
    .room-list {
      margin: 20px 0;
      border: 1px solid #ccc;
      border-radius: 5px;
      padding: 10px;
    }
    .room-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 10px;
      border-bottom: 1px solid #eee;
    }
    .room-item:last-child {
      border-bottom: none;
    }
    .room-info {
      flex: 1;
    }
    .room-actions {
      display: flex;
      gap: 10px;
    }
    .room-actions button {
      padding: 5px 10px;
      border: none;
      border-radius: 3px;
      cursor: pointer;
    }
    .join-btn {
      background: #4CAF50;
      color: white;
    }
    .create-room-form {
      margin: 20px 0;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      text-align: center;
    }
    .create-room-form input {
      margin: 10px;
      padding: 5px;
    }
    .create-room-form button {
      padding: 5px 15px;
      background: #4CAF50;
      color: white;
      border: none;
      border-radius: 3px;
      cursor: pointer;
    }
    .game-status {
      text-align: center;
      margin-bottom: 20px;
      padding: 10px;
      background: var(--game-status-bg);
      border-radius: 5px;
      border: 1px solid var(--border-color);
    }
    .game-status h2 {
      margin: 0;
      color: #333;
      font-size: 1.2em;
    }
    .countdown {
      font-size: 1.5em;
      font-weight: bold;
      color: #ff0000;
      margin: 10px 0;
    }

    /* 수정: game-status를 상단에 고정 */
    .fixed-game-status {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      z-index: 1000;
      background: var(--game-status-bg);
      border-bottom: 1px solid var(--border-color);
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      padding: 10px;
      text-align: center;
      transition: all 0.3s ease;
      width: 100%;
      max-width: 1020px;
      margin: 0 auto;
    }

    /* 다크 모드에서의 고정 상태바 스타일 */
    [data-theme="dark"] .fixed-game-status {
      background: var(--container-bg);
      border-color: var(--border-color);
      box-shadow: 0 2px 5px rgba(0,0,0,0.3);
    }

    /* 고정 상태바가 적용될 때 콘텐츠 여백 */
    .status-padding {
      padding-top: 70px;
    }
    
    /* 모바일 화면에서의 고정 상태바 스타일 */
    @media (max-width: 768px) {
      .fixed-game-status {
        padding: 5px;
        font-size: 0.9em;
      }
      
      .fixed-game-status h2 {
        font-size: 1em;
      }
      
      .status-padding {
        padding-top: 60px;
      }
    }

    .nickname-form {
      text-align: center;
      margin-bottom: 20px;
      padding: 10px;
      background: var(--nickname-form-bg);
      border-radius: 5px;
      display: flex;
      justify-content: center;
      gap: 10px;
      border: 1px solid var(--border-color);
    }
    .nickname-form input {
      padding: 5px 10px;
      border: 1px solid var(--border-color);
      border-radius: 3px;
      width: 200px;
      background: var(--input-bg);
      color: var(--text-color);
    }
    .nickname-form button,
    .controls button {
      padding: 5px 15px;
      background: var(--button-bg);
      color: white;
      border: 1px solid var(--border-color);
      border-radius: 3px;
      cursor: pointer;
    }
    .nickname-form button:hover,
    .controls button:hover {
      background: var(--button-hover-bg);
    }
    .nickname-form button:disabled,
    .controls button:disabled {
      background: var(--button-disabled-bg);
      color: #666;
      cursor: not-allowed;
    }
    .champion-list {
      margin: 20px 0;
      padding: 10px;
      background: var(--champion-list-bg);
      border-radius: 5px;
      border: 1px solid var(--border-color);
    }
    .champion-list h3 {
      margin: 0 0 10px 0;
      color: var(--text-color);
    }
    .champion-list-items {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(48px, 1fr));
      gap: 10px;
      padding: 5px;
      min-height: 60px;
      width: 100%;
    }
    
    .empty-champion-list {
      grid-column: 1 / -1;
      text-align: center;
      padding: 10px;
      color: var(--text-color);
      font-style: italic;
      width: 100%;
      display: block;
    }
    
    .champion-item {
      width: 48px;
      height: 48px;
      border-radius: 50%;
      overflow: hidden;
      cursor: pointer;
      border: 2px solid var(--border-color);
      transition: all 0.3s ease;
      background: var(--seat-bg);
    }
    .champion-item:hover {
      border-color: var(--button-hover-bg);
      background: var(--seat-taken-bg);
      transform: scale(1.1);
    }
    .champion-item img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    [data-theme="dark"] .team h3,
    [data-theme="dark"] .waiting-room h3,
    [data-theme="dark"] .champion-list h3 {
      color: #8a8aae;
    }

    /* 공지사항 모달 스타일 */
    .notice-modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: var(--modal-bg);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
    }

    .notice-modal-content {
      background-color: var(--modal-content-bg);
      color: var(--text-color);
      padding: 30px;
      border-radius: 10px;
      text-align: left;
      max-width: 600px;
      width: 90%;
      max-height: 80vh;
      overflow-y: auto;
    }

    .notice-title {
      font-size: 24px;
      font-weight: bold;
      margin-bottom: 20px;
      text-align: center;
      color: var(--button-bg);
    }

    .notice-content {
      margin-bottom: 20px;
    }

    .notice-update-item {
      margin-bottom: 15px;
      padding-left: 20px;
      position: relative;
    }

    .notice-update-item:before {
      content: "•";
      position: absolute;
      left: 0;
      color: var(--button-bg);
    }

    .notice-buttons {
      display: flex;
      justify-content: space-between;
      margin-top: 20px;
    }

    .notice-buttons button {
      padding: 10px 20px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-weight: bold;
      transition: all 0.3s ease;
    }

    .notice-close {
      background-color: var(--button-bg);
      color: white;
    }

    .notice-dont-show {
      background-color: var(--seat-bg);
      color: var(--text-color);
    }

    .notice-buttons button:hover {
      opacity: 0.9;
      transform: scale(1.05);
    }

    /* 플레이어 통계 스타일 */
    .player-stats {
      font-size: 11px;
      margin-top: 5px;
      display: flex;
      gap: 5px;
      justify-content: center;
      background-color: rgba(0, 0, 0, 0.05);
      border-radius: 10px;
      padding: 2px 5px;
      margin: 3px auto;
      max-width: fit-content;
    }

    [data-theme="dark"] .player-stats {
      background-color: rgba(255, 255, 255, 0.1);
    }
    
    .player-stats .win {
      color: var(--win-color);
      font-weight: bold;
    }
    
    .player-stats .lose {
      color: var(--lose-color);
      font-weight: bold;
    }
    
    .player-stats .winrate {
      color: var(--text-color);
      opacity: 0.8;
    }

    .player-name {
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    .banned-champions {
      width: 30%;
      padding: 10px;
      border: 1px solid var(--border-color);
      border-radius: 5px;
      flex: 1;
      min-width: 200px;
      background: var(--container-bg);
      transition: all 0.3s ease;
    }
    
    .banned-champions.ban-mode {
      width: 90%;
      max-width: 800px;
      margin: 0 auto;
    }
    
    .banned-champions h3 {
      text-align: center;
      margin-top: 0;
      color: var(--text-color);
    }
    
    .banned-list {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(48px, 1fr));
      gap: 10px;
      padding: 5px;
      min-height: 60px;
    }
    
    .ban-timer-display {
      font-size: 24px;
      font-weight: bold;
      color: #f44336;
      text-align: center;
      margin: 10px 0;
      display: none;
    }
    
    .ban-phase-controls {
      display: none;
      margin-top: 15px;
    }
    
    .ban-confirm-btn {
      padding: 10px 20px;
      background-color: #f44336;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-weight: bold;
      display: block;
      margin: 10px auto;
      transition: all 0.3s ease;
    }
    
    .ban-confirm-btn:hover {
      background-color: #d32f2f;
    }
    
    .ban-confirm-btn:disabled {
      background-color: var(--button-disabled-bg);
      cursor: not-allowed;
    }
    
    .champion-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(60px, 1fr));
      gap: 10px;
      margin-top: 15px;
      max-height: 300px;
      overflow-y: auto;
      padding: 5px;
    }
    
    .champion-item {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      overflow: hidden;
      cursor: pointer;
      border: 2px solid var(--border-color);
      transition: all 0.3s ease;
      margin: 0 auto;
      position: relative;
    }
    
    .champion-item:hover {
      transform: scale(1.1);
      border-color: #f44336;
    }
    
    .champion-item img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    
    .champion-item.banned {
      opacity: 0.5;
      position: relative;
    }
    
    .champion-item.banned::after {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(45deg, transparent 45%, #f44336 45%, #f44336 55%, transparent 55%);
    }
    
    .champion-item.selected {
      border-color: #f44336;
      border-width: 3px;
      transform: scale(1.1);
    }
    
    .ban-search-input {
      width: 100%;
      padding: 8px;
      border: 1px solid var(--border-color);
      border-radius: 5px;
      background: var(--input-bg);
      color: var(--text-color);
      margin-bottom: 10px;
    }
    
    .player-ban-status {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 10px;
      margin: 10px 0;
      display: none;
    }
    
    .player-ban-item {
      display: flex;
      align-items: center;
      gap: 5px;
      padding: 5px 10px;
      border-radius: 15px;
      background-color: var(--seat-bg);
      font-size: 12px;
    }
    
    .player-ban-item.completed {
      background-color: #4CAF50;
      color: white;
    }
    
    .player-ban-item.pending {
      background-color: #ff9800;
      color: white;
    }
    
    .player-ban-image {
      width: 20px;
      height: 20px;
      border-radius: 50%;
      overflow: hidden;
    }
    
    .player-ban-image img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    .banned-champion {
      width: 48px;
      height: 48px;
      border-radius: 50%;
      overflow: hidden;
      border: 2px solid #f44336;
      margin: 0 auto;
      position: relative;
    }
    .banned-champion img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      opacity: 0.7;
    }
    .banned-champion::after {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(45deg, transparent 45%, #f44336 45%, #f44336 55%, transparent 55%);
    }
    /* 게임 모드 선택 모달 */
    .mode-modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: var(--modal-bg);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
    }
    .mode-modal-content {
      background-color: var(--modal-content-bg);
      color: var(--text-color);
      padding: 30px;
      border-radius: 10px;
      text-align: center;
      max-width: 500px;
      width: 90%;
    }
    .mode-title {
      font-size: 24px;
      margin-bottom: 20px;
      color: var(--button-bg);
    }
    .mode-buttons {
      display: flex;
      justify-content: center;
      gap: 20px;
      margin-top: 20px;
    }
    .mode-btn {
      padding: 15px 25px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-weight: bold;
      font-size: 16px;
      transition: all 0.3s ease;
    }
    .mode-btn:hover {
      transform: scale(1.05);
    }
    .normal-mode-btn {
      background-color: var(--button-bg);
      color: white;
    }
    .ban-mode-btn {
      background-color: #f44336;
      color: white;
    }

    .ban-team-header {
      font-weight: bold;
      font-size: 16px;
      margin: 15px 0 8px 0;
      padding: 5px;
      background-color: var(--team1-border);
      color: white;
      border-radius: 5px;
      text-align: center;
    }
    
    .ban-team-header.enemy {
      background-color: var(--team2-border);
    }
    
    .player-ban-status {
      display: flex;
      flex-direction: column;
      gap: 10px;
      margin: 10px 0;
    }
    
    .player-ban-item {
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 10px;
      padding: 8px 12px;
      border-radius: 8px;
      background-color: var(--seat-bg);
      border-left: 4px solid transparent;
    }
    
    .player-ban-item.completed {
      background-color: var(--seat-taken-bg);
      border-left: 4px solid #4CAF50;
    }
    
    .player-ban-item.selecting {
      background-color: var(--seat-bg);
      border-left: 4px solid #ff9800;
      animation: pulse 1.5s infinite;
    }
    
    .player-ban-item.enemy {
      border-left: 4px solid var(--team2-border);
    }
    
    @keyframes pulse {
      0% { opacity: 0.7; }
      50% { opacity: 1; }
      100% { opacity: 0.7; }
    }
    
    .selecting-status {
      font-style: italic;
      color: #ff9800;
      font-size: 14px;
    }
    
    .empty-enemy-ban {
      padding: 10px;
      text-align: center;
      font-style: italic;
      color: var(--text-color);
      opacity: 0.7;
    }
    
    .player-ban-image {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      overflow: hidden;
      border: 2px solid #f44336;
    }

    /* 팀원이 선택 중인 챔피언을 표시하는 스타일 */
    .champion-item.selected-by-team {
      border: 2px dotted #ffcc00;
      opacity: 0.8;
      position: relative;
    }
    
    .champion-item.selected-by-team::before {
      content: '팀원 선택 중';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      background-color: rgba(255, 204, 0, 0.7);
      color: #000;
      font-size: 10px;
      text-align: center;
      padding: 2px 0;
    }

    /* 밴 단계에서 상대팀의 밴 슬롯 숨기기 - 더 명확한 선택자 사용 */
    .ban-mode .team:not(.my-team) .team-ban-slots .ban-slot {
      background-color: rgba(80, 80, 80, 0.3);
      position: relative;
    }
    
    .ban-mode .team:not(.my-team) .team-ban-slots .ban-slot img {
      display: none;
    }
    
    .ban-mode .team:not(.my-team) .team-ban-slots .ban-slot:not(.empty)::after {
      content: '?';
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      font-size: 20px;
      color: #888;
      font-weight: bold;
    }

    /* 자리 이동 애니메이션 */
    @keyframes seatMove {
      0% { 
        transform: scale(0.8);
        opacity: 0.5;
      }
      50% {
        transform: scale(1.1);
        background-color: rgba(74, 220, 162, 0.6);
      }
      100% { 
        transform: scale(1);
        opacity: 1;
      }
    }

    .seat.moving {
      animation: seatMove 0.8s ease-in-out;
    }
  </style>
</head>
<body>
  <% const currentPath = '/lol' %>
  <%- include('header.ejs', { currentPath }) %>
  <div class="container">
    <button class="theme-switch" id="themeSwitch">🌞</button>
    <div id="gameRoom" style="display: none;">
      <div class="game-status" id="gameStatus">
        <h2 id="gameStatusMessage">게임이 시작되지 않았습니다. 팀을 선택해주세요.</h2>
        <div id="countdown" class="countdown" style="display: none;"></div>
      </div>
      <div class="content-wrapper" id="contentWrapper">
      <div class="champion-list">
        <h3>팀 전용 챔피언 리스트 (클릭하여 교체)</h3>
        <div class="champion-list-items" id="championList"></div>
      </div>
      <div class="teams-container">
        <div class="team">
          <h3>팀 1</h3>
            <div class="team-ban-slots">
              <div class="ban-slot empty"></div>
              <div class="ban-slot empty"></div>
              <div class="ban-slot empty"></div>
              <div class="ban-slot empty"></div>
              <div class="ban-slot empty"></div>
            </div>
          <div id="team1Seats"></div>
        </div>
          
          <div class="banned-champions" id="bannedChampionsSection">
            <h3 id="bannedChampionsTitle">밴 챔피언</h3>
            <div id="banTimerDisplay" class="ban-timer-display"></div>
            <div id="playerBanStatus" class="player-ban-status"></div>
            <div id="banPhaseControls" class="ban-phase-controls">
              <input type="text" id="banSearchInput" class="ban-search-input" placeholder="챔피언 이름 검색...">
              <div id="championGrid" class="champion-grid"></div>
              <button id="banConfirmBtn" class="ban-confirm-btn" disabled>밴 확정</button>
            </div>
            <div id="bannedChampions" class="banned-list"></div>
          </div>
          
        <div class="team">
          <h3>팀 2</h3>
            <div class="team-ban-slots">
              <div class="ban-slot empty"></div>
              <div class="ban-slot empty"></div>
              <div class="ban-slot empty"></div>
              <div class="ban-slot empty"></div>
              <div class="ban-slot empty"></div>
            </div>
          <div id="team2Seats"></div>
        </div>
      </div>
      <div class="controls">
        <button id="startGameBtn" disabled>게임 시작</button>
        <button id="resetGameBtn" disabled>게임 초기화</button>
        <button id="resetRoomBtn" disabled>방 초기화</button>
        <button id="rerollBtn" disabled>리롤</button>
        <button id="randomAssignBtn" disabled>랜덤 배정</button>
      </div>
      <div class="waiting-room">
        <h3>대기실</h3>
        <div id="waitingSeats"></div>
        </div>
        <!-- 닉네임 변경 폼을 대기실 아래로 이동 -->
        <div class="nickname-form">
          <input type="text" id="nicknameInput" placeholder="변경할 닉네임 입력">
          <button onclick="changeNickname()">닉네임 변경</button>
        </div>
      </div>
    </div>
  </div>

  <!-- 게임 모드 선택 모달 -->
  <div id="modeSelectModal" class="mode-modal" style="display: none;">
    <div class="mode-modal-content">
      <div class="mode-title">게임 모드를 선택해주세요</div>
      <div class="mode-description">
        <p><b>일반 모드:</b> 기존 방식으로 게임이 진행됩니다.</p>
        <p><b>밴 모드:</b> 게임 시작 전 각 플레이어가 챔피언을 밴할 수 있습니다.</p>
      </div>
      <div class="mode-buttons">
        <button id="normalModeBtn" class="mode-btn normal-mode-btn">일반 모드</button>
        <button id="banModeBtn" class="mode-btn ban-mode-btn">밴 모드</button>
      </div>
    </div>
  </div>

  <script src="https://cdn.socket.io/4.7.1/socket.io.min.js"></script>
  <script>
    // 서버에서 전달받은 champions 배열을 전역 변수로 정의
    const champions = JSON.parse('<%- JSON.stringify(champions || []) %>');
    
    // SharedWorker 생성 및 소켓 연결 관리
    let socketWorker;
    let socketPort;
    let socket = {
      id: null,
      emit: function(event, data) {
        socketPort.postMessage({ type: 'emit', event, data });
      },
      on: function() {},  // 이벤트 리스너는 아래에서 처리
    };

    // SharedWorker 초기화
    function initSocketWorker() {
      try {
        socketWorker = new SharedWorker('/socket-worker.js');
        socketPort = socketWorker.port;

        // 워커로부터의 메시지 처리
        socketPort.onmessage = function(e) {
          const message = e.data;
          
          if (message.type === 'socket_event') {
            const event = message.event;
            const data = message.data;

            // 이벤트 핸들러 호출
            const handlers = eventHandlers[event] || [];
            handlers.forEach(handler => handler(data));

            // 소켓 ID 업데이트
            if (event === 'connect') {
              socket.id = data;
              console.log('서버에 연결되었습니다. 소켓 ID:', socket.id);
              
              // 소켓 ID를 로컬 스토리지에 저장
              const prevSocketId = localStorage.getItem('socketId');
              localStorage.setItem('socketId', socket.id);
              
              // 이전에 저장된 통계 정보가 있으면 서버에 전송
              const savedStats = localStorage.getItem('playerStats1');
              if (savedStats) {
                const stats = JSON.parse(savedStats);
                // 소켓 ID가 변경된 경우(재접속) 기존 통계 정보를 서버에 전송
                if (prevSocketId !== socket.id) {
                  console.log('재접속 감지: 통계 정보 전송');
                  
                  // 저장된 좌석 정보 확인
                  const seatInfo = getSeatInfo();
                  if (seatInfo) {
                    console.log('저장된 좌석 정보:', seatInfo);
                    stats.seatInfo = seatInfo; // 좌석 정보 추가
                    
                    // 재접속 시 좌석 정보가 있을 때 토스트 알림 표시
                    Toastify({
                      text: `재접속 감지: ${getTeamDisplayName(seatInfo.team)} ${seatInfo.index + 1}번 자리로 자동 접속합니다.`,
                      duration: 3000,
                      gravity: "top",
                      position: "center",
                      style: {
                        background: "linear-gradient(to right, #00b09b, #96c93d)",
                        color: "white",
                        fontWeight: "bold",
                        fontSize: "14px",
                        padding: "12px",
                        borderRadius: "5px"
                      }
                    }).showToast();
                  } else {
                    // 좌석 정보 없이 재접속할 때 토스트 알림
                    Toastify({
                      text: "재접속 감지: 대기실에 배치됩니다.",
                      duration: 3000,
                      gravity: "top",
                      position: "center",
                      style: {
                        background: "linear-gradient(to right, #3498db, #2980b9)",
                        color: "white",
                        fontWeight: "bold",
                        fontSize: "14px",
                        padding: "12px",
                        borderRadius: "5px"
                      }
                    }).showToast();
                  }
                  
                  socket.emit('reconnect-player', stats);
                }
              }
              
              // 이미 방 생성 중이 아닐 때만 방 상태 체크
              if (!isCreatingRoom && !hasJoined) {
                socket.emit('check-room');
              }
            }
          }
        };

        // 워커 초기화 메시지 전송
        socketPort.postMessage({ type: 'init' });
        socketPort.start();
      } catch (error) {
        console.error('SharedWorker 초기화 실패:', error);
        alert('브라우저가 지원하지 않아 서버 연결에 실패했습니다. 크롬 브라우저를 사용해주세요.');
      }
    }

    // 이벤트 핸들러 저장소
    const eventHandlers = {};

    // 이벤트 리스너 등록 함수 재정의
    socket.on = function(event, handler) {
      if (!eventHandlers[event]) {
        eventHandlers[event] = [];
      }
      eventHandlers[event].push(handler);
    };

    // SharedWorker 초기화 실행
    initSocketWorker();

    // 페이지 언로드 시 정리
    window.addEventListener('unload', () => {
      if (socketPort) {
        socketPort.close();
      }
    });
    
    // 한글 챔피언 이름 매핑
    const koreanChampionNames = {
      'Aatrox': '아트록스',
      'Ahri': '아리',
      'Akali': '아칼리',
      'Akshan': '아크샨',
      'Alistar': '알리스타',
      'Amumu': '아무무',
      'Anivia': '애니비아',
      'Annie': '애니',
      'Aphelios': '아펠리오스',
      'Ashe': '애쉬',
      'AurelionSol': '아우렐리온 솔',
      'Azir': '아지르',
      'Bard': '바드',
      'Belveth': '벨베스',
      'Blitzcrank': '블리츠크랭크',
      'Brand': '브랜드',
      'Braum': '브라움',
      'Briar': '브라이어',
      'Caitlyn': '케이틀린',
      'Camille': '카밀',
      'Cassiopeia': '카시오페아',
      'Chogath': '초가스',
      'Corki': '코르키',
      'Darius': '다리우스',
      'Diana': '다이애나',
      'Draven': '드레이븐',
      'DrMundo': '문도 박사',
      'Ekko': '에코',
      'Elise': '엘리스',
      'Evelynn': '이블린',
      'Ezreal': '이즈리얼',
      'Fiddlesticks': '피들스틱',
      'Fiora': '피오라',
      'Fizz': '피즈',
      'Galio': '갈리오',
      'Gangplank': '갱플랭크',
      'Garen': '가렌',
      'Gnar': '나르',
      'Gragas': '그라가스',
      'Graves': '그레이브즈',
      'Gwen': '그웬',
      'Hecarim': '헤카림',
      'Heimerdinger': '하이머딩거',
      'Illaoi': '일라오이',
      'Irelia': '이렐리아',
      'Ivern': '아이번',
      'Janna': '잔나',
      'JarvanIV': '자르반 4세',
      'Jax': '잭스',
      'Jayce': '제이스',
      'Jhin': '진',
      'Jinx': '징크스',
      'Kaisa': '카이사',
      'Kalista': '칼리스타',
      'Karma': '카르마',
      'Karthus': '카서스',
      'Kassadin': '카사딘',
      'Katarina': '카타리나',
      'Kayle': '케일',
      'Kayn': '케인',
      'Kennen': '케넨',
      'Khazix': '카직스',
      'Kindred': '킨드레드',
      'Kled': '클레드',
      'KogMaw': '코그모',
      'KSante': '크산테',
      'Leblanc': '르블랑',
      'LeeSin': '리 신',
      'Leona': '레오나',
      'Lillia': '릴리아',
      'Lissandra': '리산드라',
      'Lucian': '루시안',
      'Lulu': '룰루',
      'Lux': '럭스',
      'Malphite': '말파이트',
      'Malzahar': '말자하',
      'Maokai': '마오카이',
      'MasterYi': '마스터 이',
      'Milio': '밀리오',
      'MissFortune': '미스 포츈',
      'Mordekaiser': '모데카이저',
      'Morgana': '모르가나',
      'Naafiri': '나피리',
      'Nami': '나미',
      'Nasus': '나서스',
      'Nautilus': '노틸러스',
      'Neeko': '니코',
      'Nidalee': '니달리',
      'Nilah': '닐라',
      'Nocturne': '녹턴',
      'Nunu': '누누와 윌럼프',
      'Olaf': '올라프',
      'Orianna': '오리아나',
      'Ornn': '오른',
      'Pantheon': '판테온',
      'Poppy': '뽀삐',
      'Pyke': '파이크',
      'Qiyana': '키이나',
      'Quinn': '퀸',
      'Rakan': '라칸',
      'Rammus': '람머스',
      'RekSai': '렉사이',
      'Rell': '렐',
      'RenataGlasc': '레나타 글라스크',
      'Renekton': '레넥톤',
      'Rengar': '렝가',
      'Riven': '리븐',
      'Rumble': '럼블',
      'Ryze': '라이즈',
      'Samira': '사미라',
      'Sejuani': '세주아니',
      'Senna': '세나',
      'Seraphine': '세라핀',
      'Sett': '세트',
      'Shaco': '샤코',
      'Shen': '쉔',
      'Shyvana': '쉬바나',
      'Singed': '신지드',
      'Sion': '사이온',
      'Sivir': '시비르',
      'Skarner': '스카너',
      'Sona': '소나',
      'Soraka': '소라카',
      'Swain': '스웨인',
      'Sylas': '사일러스',
      'Syndra': '신드라',
      'TahmKench': '탐 켄치',
      'Taliyah': '탈리야',
      'Talon': '탈론',
      'Taric': '타릭',
      'Teemo': '티모',
      'Thresh': '쓰레쉬',
      'Tristana': '트리스타나',
      'Trundle': '트런들',
      'Tryndamere': '트린다미어',
      'TwistedFate': '트위스티드 페이트',
      'Twitch': '트위치',
      'Udyr': '우디르',
      'Urgot': '우르곳',
      'Varus': '바루스',
      'Vayne': '베인',
      'Veigar': '베이가',
      'Velkoz': '벨코즈',
      'Vex': '벡스',
      'Vi': '바이',
      'Viego': '비에고',
      'Viktor': '빅토르',
      'Vladimir': '블라디미르',
      'Volibear': '볼리베어',
      'Warwick': '워윅',
      'Wukong': '오공',
      'Xayah': '자야',
      'Xerath': '제라스',
      'XinZhao': '신 짜오',
      'Yasuo': '야스오',
      'Yone': '요네',
      'Yorick': '요릭',
      'Yuumi': '유미',
      'Zac': '자크',
      'Zed': '제드',
      'Zeri': '제리',
      'Ziggs': '직스',
      'Zilean': '질리언',
      'Zoe': '조이',
      'Zyra': '자이라'
    };
    
    // 영문 이름으로 한글 이름 찾기
    function getKoreanName(englishName) {
      return koreanChampionNames[englishName] || englishName;
    }
    
    // 한글 이름으로 영문 이름 찾기
    function getEnglishName(koreanName) {
      for (const [english, korean] of Object.entries(koreanChampionNames)) {
        if (korean === koreanName) {
          return english;
        }
      }
      return koreanName; // 매칭되는 영문 이름이 없으면 입력값 그대로 반환
    }
    
    let isHost = false;
    let rerollCount = 2;
    let currentChampion = '';
    let gameStarted = false;
    let hasJoined = false;
    let countdownInterval = null; // 카운트다운 타이머를 저장할 전역 변수
    let isDarkTheme = false;      // 테마 상태 변수
    let bannedChampions = [];     // 밴 챔피언 목록
    let isBanMode = false;        // 밴 모드 여부
    let selectedBanChampion = null; // 현재 선택한 밴할 챔피언
    let banTimerInterval = null;  // 밴 타이머 인터벌
    let playerBanStatus = {};     // 플레이어별 밴 상태
    let myTeamBans = [];          // 내 팀의 밴 챔피언
    let banPhaseEnded = false;    // 밴 단계 종료 여부
    
    // 플레이어 통계를 위한 변수
    let playerStats = {
      nickname: '',
      win: 0,
      lose: 0,
      rerollCount: 2
    };
    
    // 현재 공지사항 버전 - 업데이트마다 숫자를 올려주세요
    const NOTICE_VERSION = "1.3";

    // 쿠키 설정 함수
    function setCookie(name, value, days) {
      let expires = "";
      if (days) {
        const date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        expires = "; expires=" + date.toUTCString();
      }
      document.cookie = name + "=" + value + expires + "; path=/";
    }

    // 쿠키 가져오기 함수
    function getCookie(name) {
      const nameEQ = name + "=";
      const ca = document.cookie.split(';');
      for (let i = 0; i < ca.length; i++) {
        let c = ca[i];
        while (c.charAt(0) === ' ') c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
      }
      return null;
    }

    // 특정 쿠키 삭제 함수
    function deleteCookie(name) {
      document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/;';
    }

    // 플레이어 좌석 정보 저장 함수
    function saveSeatInfo(team, index) {
      // 좌석 정보를 JSON으로 저장
      const seatInfo = JSON.stringify({
        team: team,
        index: index,
        timestamp: Date.now()
      });
      
      // 쿠키에 1시간 만료로 저장 (days = 1/24)
      setCookie("playerSeat", seatInfo, 1/24);
    }

    // 플레이어 좌석 정보 가져오기 함수
    function getSeatInfo() {
      const seatInfoStr = getCookie("playerSeat");
      if (!seatInfoStr) return null;
      
      try {
        const seatInfo = JSON.parse(seatInfoStr);
        
        // 유효 시간 확인 (1시간 = 3600000 밀리초)
        const now = Date.now();
        if (now - seatInfo.timestamp > 3600000) {
          deleteCookie("playerSeat");
          return null;
        }
        
        return seatInfo;
      } catch (e) {
        deleteCookie("playerSeat");
        return null;
      }
    }

    // 플레이어 통계 초기화 함수
    function initPlayerStats() {
      // 로컬 스토리지에서 통계 확인
      const savedStats = localStorage.getItem('playerStats1');
      
      if (savedStats) {
        // 저장된 통계가 있다면 불러오기
        const parsedStats = JSON.parse(savedStats);
        // 기존 rerollCount 값 유지
        playerStats = {
          ...parsedStats,
          rerollCount: parsedStats.rerollCount || 2 // 기존 값이 없을 경우에만 2로 설정
        };
        console.log('저장된 플레이어 통계 정보 불러옴:', playerStats);
      } else {
        // 저장된 통계가 없다면 기본값 설정
        playerStats = {
          nickname: `플레이어${Math.floor(Math.random() * 50) + 1}`, // 1~50 사이의 랜덤 번호
          win: 0,
          lose: 0,
          rerollCount: 2
        };
        // 로컬 스토리지에 저장
        localStorage.setItem('playerStats1', JSON.stringify(playerStats));
        console.log('새 플레이어 통계 정보 생성:', playerStats);
      }
      
      // 접속 상태 저장
      hasJoined = localStorage.getItem('hasJoined') === 'true';
      
      // 이미 방에 참여한 상태였다면 바로 표시
      if (hasJoined) {
        document.getElementById('gameRoom').style.display = 'block';
      }
      
      // 초기 접속 시에만 서버에 통계 전송
      socket.emit('update-player-stats', playerStats);
    }
    
    // 플레이어 통계 저장 함수 (로컬에만 저장)
    function savePlayerStats() {
      localStorage.setItem('playerStats1', JSON.stringify(playerStats));
    }
    
    // 페이지 로드 시 쿠키에서 테마 설정 읽기
    function loadThemeFromCookie() {
      const savedTheme = getCookie("darkMode");
      if (savedTheme === "true") {
        isDarkTheme = true;
        document.documentElement.setAttribute('data-theme', 'dark');
        document.getElementById('themeSwitch').textContent = '🌙';
      } else {
        isDarkTheme = false;
        document.documentElement.setAttribute('data-theme', 'light');
        document.getElementById('themeSwitch').textContent = '🌞';
      }
    }
    
    // 페이지 로드 시 테마 설정 로드
    document.addEventListener('DOMContentLoaded', () => {
      loadThemeFromCookie();
      initPlayerStats(); // 플레이어 통계 초기화
      
      // 초기 로드 시 밴 챔피언 섹션 숨기기
      const bannedChampionsSection = document.getElementById('bannedChampionsSection');
      if (bannedChampionsSection) {
        bannedChampionsSection.style.display = 'none';
      }
      
      // game-status를 상단에 고정
      makeGameStatusFixed();
      
      setTimeout(showNotice, 1000); // 1초 후 공지사항 표시
    });
    
    // game-status를 상단에 고정하는 함수
    function makeGameStatusFixed() {
      const gameStatus = document.getElementById('gameStatus');
      const contentWrapper = document.getElementById('contentWrapper');
      const container = document.querySelector('.container');
      
      if (gameStatus && contentWrapper && container) {
        // fixed-game-status 클래스 추가
        gameStatus.classList.add('fixed-game-status');
        
        // 콘텐츠에 여백 추가
        contentWrapper.classList.add('status-padding');
        
        // 화면 크기에 따라 조정하는 함수
        function adjustGameStatus() {
          const containerRect = container.getBoundingClientRect();
          
          // 컨테이너의 너비에 맞춤
          gameStatus.style.width = container.offsetWidth + 'px';
          
          // 컨테이너의 좌측 위치에 맞춤 (가운데 정렬)
          gameStatus.style.left = containerRect.left + 'px';
          gameStatus.style.right = 'auto';
          
          // 게임 상태 메시지 글자 크기 조정
          const gameStatusMessage = document.getElementById('gameStatusMessage');
          if (gameStatusMessage) {
            if (window.innerWidth < 500) {
              gameStatusMessage.style.fontSize = '0.9em';
            } else {
              gameStatusMessage.style.fontSize = '1.2em';
            }
          }
        }
        
        // 초기 실행
        adjustGameStatus();
        
        // 리사이즈 및 스크롤 이벤트에 연결
        window.addEventListener('resize', adjustGameStatus);
        window.addEventListener('scroll', adjustGameStatus);
        
        // 화면 회전 이벤트 (모바일)
        window.addEventListener('orientationchange', function() {
          setTimeout(adjustGameStatus, 100);
        });
      }
    }

    // 초기 화면 설정
    socket.on('connect', () => {
      console.log('서버에 연결되었습니다. 소켓 ID:', socket.id);
      
      // 소켓 ID를 로컬 스토리지에 저장
      const prevSocketId = localStorage.getItem('socketId');
      localStorage.setItem('socketId', socket.id);
      
      // 이전에 저장된 통계 정보가 있으면 서버에 전송
      const savedStats = localStorage.getItem('playerStats1');
      let stats = null;
      
      if (savedStats) {
        stats = JSON.parse(savedStats);
        // 소켓 ID가 변경된 경우(재접속) 기존 통계 정보를 서버에 전송
        if (prevSocketId !== socket.id) {
          console.log('재접속 감지: 통계 정보 전송');
          
          // 저장된 좌석 정보 확인
          const seatInfo = getSeatInfo();
          if (seatInfo) {
            console.log('저장된 좌석 정보:', seatInfo);
            stats.seatInfo = seatInfo; // 좌석 정보 추가
            
            // 재접속 시 좌석 정보가 있을 때 토스트 알림 표시
            Toastify({
              text: `재접속 감지: ${getTeamDisplayName(seatInfo.team)} ${seatInfo.index + 1}번 자리로 자동 접속합니다.`,
              duration: 3000,
              gravity: "top",
              position: "center",
              style: {
                background: "linear-gradient(to right, #00b09b, #96c93d)",
                color: "white",
                fontWeight: "bold",
                fontSize: "14px",
                padding: "12px",
                borderRadius: "5px"
              }
            }).showToast();
          } else {
            // 좌석 정보 없이 재접속할 때 토스트 알림
            Toastify({
              text: "재접속 감지: 대기실에 배치됩니다.",
              duration: 3000,
              gravity: "top",
              position: "center",
              style: {
                background: "linear-gradient(to right, #3498db, #2980b9)",
                color: "white",
                fontWeight: "bold",
                fontSize: "14px",
                padding: "12px",
                borderRadius: "5px"
              }
            }).showToast();
          }
          
          socket.emit('reconnect-player', stats);
        }
      }
      
      // 이미 방 생성 중이 아닐 때만 방 상태 체크
      if (!isCreatingRoom && !hasJoined) {
        socket.emit('check-room');
      }
    });

    // 닉네임 변경 함수
    function changeNickname() {
      const newNickname = document.getElementById('nicknameInput').value.trim();
      if (newNickname) {
        socket.emit('change-nickname', newNickname);
        // 플레이어 통계에도 닉네임 업데이트
        playerStats.nickname = newNickname;
        savePlayerStats();
        // 닉네임이 변경되었으므로 서버에 통계 전송
        socket.emit('update-player-stats', playerStats);
        document.getElementById('nicknameInput').value = '';
      }
    }
    
    // 서버에서 통계 정보 업데이트 이벤트 수신
    socket.on('player-stats-updated', (updatedStats) => {
      console.log('서버에서 통계 정보 업데이트 수신:', updatedStats);
      // 로컬 통계 정보 업데이트
      playerStats = {
        ...playerStats,
        ...updatedStats
      };
      savePlayerStats();
    });

    // 닉네임 에러 처리
    socket.on('nickname-error', (message) => {
      alert(message);
    });

    // 닉네임 변경 성공
    socket.on('nickname-changed', (newNickname) => {
      alert('닉네임이 변경되었습니다: ' + newNickname);
      // 플레이어 통계에도 닉네임 업데이트
      playerStats.nickname = newNickname;
      savePlayerStats();
      // 닉네임이 변경되었으므로 서버에 통계 전송
      socket.emit('update-player-stats', playerStats);
    });

    // 팀 이름을 표시 이름으로 변환하는 함수
    function getTeamDisplayName(team) {
      if (team === 'team1') return '팀 1';
      if (team === 'team2') return '팀 2';
      return '대기실';
    }

    // 방 생성 중 상태 관리 변수
    let isCreatingRoom = false;

    // 방 상태 확인
    socket.on('room-status', (hasRoom) => {
      if (hasRoom) {
        // 방이 있으면 자동으로 입장
        if (!hasJoined) {
          console.log('새로운 플레이어로 방 입장');
          hasJoined = true;
          localStorage.setItem('hasJoined', 'true');
          socket.emit('join-room');
        } else {
          console.log('이미 참여한 상태로 방 재입장');
        }
        document.getElementById('gameRoom').style.display = 'block';
        document.getElementById('resetRoomBtn').disabled = false;
        
        // 방 생성 중 상태 초기화
        isCreatingRoom = false;
      } else {
        // 방이 없으면 무조건 hasJoined 초기화하고 방 생성 프로세스 시작
        console.log('방이 없습니다. 생성 프로세스 시작');
        hasJoined = false;
        localStorage.removeItem('hasJoined');
        document.getElementById('gameRoom').style.display = 'none';
        
        // 이미 방 생성 중이면 중복 프롬프트 방지
        if (isCreatingRoom) {
          console.log('이미 방 생성 중입니다. 중복 프롬프트 방지');
          return;
        }
        
        // 방 생성 중 상태로 설정
        isCreatingRoom = true;
        
        const password = prompt('생성된 방이 없습니다 방을 생성하려면 비밀번호를 입력해주세요!');
        if (password === 'star') {
          console.log('방 생성 시 전송할 통계 정보:', playerStats);
          socket.emit('create-room', { 
            name: '롤 랜덤 챔피언 뽑기',
            stats: playerStats
          });
          isHost = true;
          hasJoined = true;
          localStorage.setItem('hasJoined', 'true');
          
          document.getElementById('nicknameInput').placeholder = playerStats.nickname;
          document.getElementById('gameRoom').style.display = 'block';
          document.getElementById('resetGameBtn').disabled = false;
          document.getElementById('resetRoomBtn').disabled = false;
        } else {
          // 방 생성 취소 시 상태 초기화
          isCreatingRoom = false;
          alert('호스트 비밀번호가 틀렸습니다. 페이지를 새로고침하세요.');
        }
      }
    });

    // 자리 업데이트 함수
    function updateSeats(players, containerId) {
      const container = document.getElementById(containerId);
      container.innerHTML = '';
      
      // 밴 모드 상태인지 확인
      const isBanPhaseActive = document.getElementById('bannedChampionsSection').classList.contains('ban-mode');
      
      players.forEach((player, index) => {
        const seat = document.createElement('div');
        seat.className = `seat ${player ? 'taken' : ''} ${containerId.includes('team1') ? 'team1' : 
                         containerId.includes('team2') ? 'team2' : 'waiting'}`;
        
        if (player) {
          const isCurrentPlayer = player.id === socket.id;
          const isSameTeam = (containerId.includes('team1') && socket.team === 'team1') || 
                            (containerId.includes('team2') && socket.team === 'team2');
          
          // 승률 계산
          const winRate = player.stats && (player.stats.win + player.stats.lose > 0) ? 
                         Math.round((player.stats.win / (player.stats.win + player.stats.lose)) * 100) : 0;
          
          seat.innerHTML = `
            <div class="player-info">
              <div class="player-name ${isCurrentPlayer ? 'self' : ''} ${player.isHost ? 'host' : ''}">
                ${player.nickname}${player.isHost ? ' 👑' : ''}
                ${player.stats ? `
                <div class="player-stats">
                  <span class="win">${player.stats.win}승</span> 
                  <span class="lose">${player.stats.lose}패</span> 
                  <span class="winrate">(${winRate}%)</span>
                </div>` : ''}
              </div>
              ${player.champion ? 
                (isCurrentPlayer || isSameTeam ? 
                `<div class="champion-display"><img src="/champions/${player.champion}.png" alt="${player.champion}" title="${player.champion}"></div>` : 
                `<div class="champion-display unknown">???</div>`) : ''}
            </div>
          `;
          
          // 새로 추가된 플레이어에게 애니메이션 적용
          if (isCurrentPlayer && player.justMoved) {
            seat.classList.add('moving');
            // 애니메이션이 끝나면 클래스 제거
            setTimeout(() => {
              seat.classList.remove('moving');
            }, 800);
          }
        } else {
          seat.innerHTML = `
            <div class="player-info">
              <div>자리 ${index + 1}</div>
            </div>
            ${!gameStarted && !isBanPhaseActive ? '<button class="select-btn">선택하기</button>' : ''}
          `;
          if (!gameStarted && !isBanPhaseActive) {
            seat.querySelector('.select-btn').addEventListener('click', () => {
              const selectedTeam = containerId.includes('team1') ? 'team1' : 
                                 containerId.includes('team2') ? 'team2' : 'waiting';
              socket.team = selectedTeam;
              
              // 소켓 이벤트 전송
              socket.emit('select-seat', {
                team: selectedTeam,
                index
              });
              
              // 자리 선택 시 쿠키에 좌석 정보 저장
              saveSeatInfo(selectedTeam, index);
              
              // 자리 선택 시 진행 중인 애니메이션 클래스를 모두 제거
              document.querySelectorAll('.seat.moving').forEach(el => {
                el.classList.remove('moving');
              });
            });
          }
        }
        container.appendChild(seat);
      });
    }

    // 리롤 업데이트
    socket.on('reroll-update', (count) => {
      const rerollBtn = document.getElementById('rerollBtn');
      if (rerollBtn) {
        rerollBtn.disabled = count <= 0;
        console.log('리롤 버튼 업데이트 완료:', {
          disabled: rerollBtn.disabled
        });
        
        // 리롤 카운트가 변경된 경우에만 업데이트
        if (playerStats.rerollCount !== count) {
          // 플레이어 통계 업데이트
          playerStats.rerollCount = count;
          savePlayerStats();
        }
        
        // 리롤 횟수 Toastify 알림
        Toastify({
          text: `리롤 잔여 횟수: ${count}회`,
          duration: 1500,
          gravity: "bottom",
          position: "right",
          style: {
            background: "linear-gradient(to right, #2196F3, #1976D2)",
            color: "white",
            fontWeight: "bold",
            fontSize: "14px",
            padding: "12px",
            borderRadius: "5px"
          }
        }).showToast();
      }
    });

    // 챔피언 할당
    socket.on('champion-assigned', (champion) => {
      currentChampion = champion;
      updateChampionDisplay();
    });

    // 게임 상태 업데이트
    socket.on('game-state', (state) => {
      // 게임 상태 수신 시 게임 화면 표시 확인
      if (hasJoined && document.getElementById('gameRoom').style.display === 'none') {
        console.log('게임 상태 수신 시 게임룸이 숨겨져 있어 표시로 변경');
        document.getElementById('gameRoom').style.display = 'block';
      }
      
      // 게임 시작 여부 확인 (챔피언이 할당된 플레이어가 있는지 확인)
      gameStarted = [...state.team1, ...state.team2].some(player => player && player.champion);
      
      
      // 밴 단계 활성화 여부 확인
      const isBanPhaseActive = document.querySelector('.teams-container').classList.contains('ban-mode');
      
      // 게임 상태 메시지 업데이트
      const gameStatusMessage = document.getElementById('gameStatusMessage');
      if (gameStarted) {
        gameStatusMessage.textContent = '게임이 시작되었습니다!';
        gameStatusMessage.style.color = '#4CAF50';
        // 게임 시작되면 밴 컨트롤 숨기기
        document.getElementById('banPhaseControls').style.display = 'none';
        // 게임 시작되면 밴 챔피언 섹션 숨기기
        document.getElementById('bannedChampionsSection').style.display = 'none';
        // 팀 컨테이너에 no-ban 클래스 추가
        document.querySelector('.teams-container').classList.add('no-ban');
      } else {
        gameStatusMessage.textContent = '게임이 시작되지 않았습니다. 팀을 선택해주세요.';
        // 게임 시작 전이고 밴 단계가 아닐 때 호스트만 밴 컨트롤 표시
        document.getElementById('banPhaseControls').style.display = isBanPhaseActive ? 'block' : (isHost ? 'flex' : 'none');
        // 기본적으로 밴 챔피언 섹션 숨기기 (밴 단계가 시작될 때만 표시)
        document.getElementById('bannedChampionsSection').style.display = isBanPhaseActive ? 'block' : 'none';
        // 팀 컨테이너에 no-ban 클래스 추가
        document.querySelector('.teams-container').classList.add(isBanPhaseActive ? 'ban-mode' : 'no-ban');
      }
      
      updateSeats(state.team1, 'team1Seats');
      updateSeats(state.team2, 'team2Seats');
      updateSeats(state.waiting, 'waitingSeats');
      
      // 밴 챔피언 목록 업데이트
      if (state.bannedChampions) {
        bannedChampions = state.bannedChampions;
        updateBannedChampions();
      }
      
      // 내 팀 찾기 (게임 상태 갱신시에도 내 팀 확인)
      let myTeam = null;
      const allPlayers = [...state.team1, ...state.team2, ...state.waiting];
      const currentPlayer = allPlayers.find(p => p && p.id === socket.id);
      
      if (currentPlayer) {
        myTeam = currentPlayer.team;
        socket.team = myTeam;
        
        // 현재 플레이어의 통계 정보 가져오기
        if (currentPlayer.stats) {
          // 플레이어 통계 정보에 변화가 있는지 확인
          const statsChanged = 
            playerStats.win !== currentPlayer.stats.win ||
            playerStats.lose !== currentPlayer.stats.lose ||
            playerStats.rerollCount !== currentPlayer.stats.rerollCount;
          
          if (statsChanged) {
            // 플레이어 통계 정보 업데이트
            playerStats = {
              ...playerStats,
              win: currentPlayer.stats.win,
              lose: currentPlayer.stats.lose,
              rerollCount: currentPlayer.stats.rerollCount
            };
            savePlayerStats();
          }
        }
      } else {
        // 플레이어를 찾지 못했을 경우 team1과 team2에서 직접 찾기
        const team1Player = state.team1.find(p => p && p.id === socket.id);
        if (team1Player) {
          myTeam = 'team1';
          socket.team = myTeam;
        }
        
        const team2Player = state.team2.find(p => p && p.id === socket.id);
        if (team2Player) {
          myTeam = 'team2';
          socket.team = myTeam;
        }
      }
      
      // 같은 팀의 챔피언 리스트 업데이트
        if (myTeam && state[`${myTeam}Champions`]) {
          updateChampionList(state[`${myTeam}Champions`]);
      }
      
      // 호스트인 경우에만 시작 버튼 활성화
      if (isHost) {
        const hasWaitingPlayers = state.waiting.some(p => p !== null);
        // 밴 단계에서는 게임 시작 버튼 비활성화
        document.getElementById('startGameBtn').disabled = hasWaitingPlayers || gameStarted || isBanPhaseActive;
        document.getElementById('resetGameBtn').disabled = !gameStarted;
        document.getElementById('resetRoomBtn').disabled = false;
        
        // 랜덤 배정 버튼 활성화 조건: 
        // 1. 대기실에 플레이어가 있고 
        // 2. 게임이 시작되지 않았으며
        // 3. 팀1과 팀2에 플레이어가 없어야 함
        const hasPlayersInWaiting = state.waiting.some(p => p !== null);
        const hasPlayersInTeam1 = state.team1.some(p => p !== null);
        const hasPlayersInTeam2 = state.team2.some(p => p !== null);
        document.getElementById('randomAssignBtn').disabled = !hasPlayersInWaiting || gameStarted || hasPlayersInTeam1 || hasPlayersInTeam2;
      }

      // 리롤 버튼 업데이트
      if (currentPlayer) {
        const rerollBtn = document.getElementById('rerollBtn');
        // 현재 플레이어의 리롤 횟수 업데이트
        const rerollCount = currentPlayer.stats ? currentPlayer.stats.rerollCount : 2;
        
        // 리롤 버튼 비활성화 조건:
        // 1. 게임이 시작되지 않았거나
        // 2. 리롤 횟수가 0이거나
        // 3. 리롤 횟수가 없는 경우
        rerollBtn.disabled = !gameStarted || !rerollCount || rerollCount <= 0;
        
        // 리롤 횟수 표시 업데이트
        let rerollCountDisplay = document.querySelector('.reroll-count-display');
        if (!rerollCountDisplay) {
          rerollCountDisplay = document.createElement('span');
          rerollCountDisplay.className = 'reroll-count-display';
          rerollBtn.parentNode.insertBefore(rerollCountDisplay, rerollBtn.nextSibling);
        }
        rerollCountDisplay.textContent = ` (${rerollCount}회)`;
        
        // 플레이어 통계의 리롤 카운트가 서버와 다를 경우에만 업데이트
        if (playerStats.rerollCount !== rerollCount) {
          playerStats.rerollCount = rerollCount;
          savePlayerStats();
        }
      } else {
        // 플레이어가 없는 경우 기본값 표시
        const rerollBtn = document.getElementById('rerollBtn');
        rerollBtn.disabled = !gameStarted;
      }
    });

    // 게임 초기화 이벤트
    socket.on('game-reset', () => {
      console.log('게임 초기화 이벤트 수신');
      
      const rerollBtn = document.getElementById('rerollBtn');
      rerollBtn.disabled = true;
      
      // 게임 초기화시 밴 챔피언 섹션 숨기기
      document.getElementById('bannedChampionsSection').style.display = 'none';
      
      // 밴 목록 초기화
      bannedChampions = [];
      playerBanStatus = {};
      banPhaseEnded = false;  // 밴 단계 종료 플래그 초기화
      
      // 팀 컨테이너에 no-ban 클래스 추가
      document.querySelector('.teams-container').classList.add('no-ban');
      document.querySelector('.teams-container').classList.remove('ban-mode');
      
      // 팀에서 my-team 클래스 제거
      document.querySelectorAll('.team').forEach(team => {
        team.classList.remove('my-team');
      });
      
      // 밴 슬롯 초기화를 여러 번 시도하여 확실히 처리
      // 즉시 한 번 실행
      forceResetAllBanSlots();
      
      // 약간의 지연 후 한 번 더 실행 (비동기 네트워크 지연 고려)
      setTimeout(() => {
        forceResetAllBanSlots();
      }, 100);
      
      // 조금 더 지연 후 한 번 더 실행 (화면 리프레시 등의 상황 고려)
      setTimeout(() => {
        forceResetAllBanSlots();
      }, 500);
      
      // 초기화 알림
        Toastify({
        text: "게임이 초기화되었습니다.",
          duration: 1500,
          gravity: "top",
          position: "center",
          style: {
          background: "linear-gradient(to right, #4CAF50, #2E7D32)",
            color: "white",
            fontWeight: "bold",
          fontSize: "14px",
          padding: "12px",
            borderRadius: "5px"
          }
        }).showToast();
    });

    // 게임 초기화 버튼
    document.getElementById('resetGameBtn').addEventListener('click', () => {
      if (!gameStarted) {
        Toastify({
          text: "게임이 시작되지 않았습니다.",
          duration: 1500,
          gravity: "top",
          position: "center",
          style: {
            background: "linear-gradient(to right, #ff9800, #f57c00)",
            color: "white",
            fontWeight: "bold",
            fontSize: "16px",
            padding: "15px",
            borderRadius: "5px"
          }
        }).showToast();
        return;
      }
      
      // 승리 팀 선택 대화상자 표시
      Toastify({
        text: "승리한 팀을 선택해주세요",
        duration: 3000,
        gravity: "top",
        position: "center",
        style: {
          background: "linear-gradient(to right, #4CAF50, #2E7D32)",
          color: "white",
          fontWeight: "bold",
          fontSize: "16px",
          padding: "15px",
          borderRadius: "5px"
        }
      }).showToast();
      
      // 승리 팀 선택 모달 표시
      const modal = document.createElement('div');
      modal.className = 'win-modal';
      modal.innerHTML = `
        <div class="win-modal-content">
          <h3>승리 팀 선택</h3>
          <p>승리한 팀을 선택하면 패배한 팀에게 리롤 +1이 적립됩니다.</p>
          <div class="win-team-buttons">
            <button id="team1Win">팀 1 승리</button>
            <button id="team2Win">팀 2 승리</button>
            <button id="noWinner">취소</button>
          </div>
        </div>
      `;
      document.body.appendChild(modal);
      
      // 모달 스타일
      const style = document.createElement('style');
      style.textContent = `
        .win-modal {
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background-color: rgba(0, 0, 0, 0.7);
          display: flex;
          justify-content: center;
          align-items: center;
          z-index: 1000;
        }
        .win-modal-content {
          background-color: var(--container-bg);
          color: var(--text-color);
          padding: 20px;
          border-radius: 10px;
          text-align: center;
          max-width: 400px;
          width: 100%;
        }
        .win-team-buttons {
          display: flex;
          flex-direction: column;
          gap: 10px;
          margin-top: 20px;
        }
        .win-team-buttons button {
          padding: 10px 20px;
          border: none;
          border-radius: 5px;
          cursor: pointer;
          font-weight: bold;
          transition: all 0.3s ease;
        }
        #team1Win {
          background-color: var(--team1-border);
          color: white;
        }
        #team2Win {
          background-color: var(--team2-border);
          color: white;
        }
        #noWinner {
          background-color: var(--button-bg);
          color: white;
        }
        .win-team-buttons button:hover {
          opacity: 0.9;
          transform: scale(1.05);
        }
      `;
      document.head.appendChild(style);
      
      // 버튼 이벤트 리스너
      document.getElementById('team1Win').addEventListener('click', () => {
        // 승리 팀 정보만 서버에 전송하고 승패 처리는 서버에서 수행
        socket.emit('reset-game', { winningTeam: 'team1', resetBans: true });
        document.body.removeChild(modal);
        
        // 밴 슬롯 초기화 - 즉시 초기화 처리
        forceResetAllBanSlots();
        banPhaseEnded = false;
      });
      
      document.getElementById('team2Win').addEventListener('click', () => {
        // 승리 팀 정보만 서버에 전송하고 승패 처리는 서버에서 수행
        socket.emit('reset-game', { winningTeam: 'team2', resetBans: true });
        document.body.removeChild(modal);
        
        // 밴 슬롯 초기화 - 즉시 초기화 처리
        forceResetAllBanSlots();
        banPhaseEnded = false;
      });
      
      document.getElementById('noWinner').addEventListener('click', () => {
        socket.emit('reset-game', { winningTeam: null, resetBans: true });
        document.body.removeChild(modal);
        
        // 밴 슬롯 초기화 - 즉시 초기화 처리
        forceResetAllBanSlots();
        banPhaseEnded = false;
      });
    });
    
    // 강제 밴 슬롯 초기화 - 더 강력한 버전
    function forceResetAllBanSlots() {
      console.log('강제 밴 슬롯 초기화 실행');
      
      try {
        // 모든 팀의 모든 밴 슬롯 초기화
        const allBanSlots = document.querySelectorAll('.team-ban-slots .ban-slot');
        
        allBanSlots.forEach((slot, index) => {
          // 기존 내용물 전체 삭제
          while(slot.firstChild) {
            slot.removeChild(slot.firstChild);
          }
          
          // empty 클래스 추가 및 스타일 직접 설정
          slot.classList.add('empty');
          
          // 추가 스타일 초기화
          slot.style.backgroundImage = '';
          slot.style.opacity = '';
        });
        
        // 중앙 밴 섹션 초기화
        const bannedChampionsContainer = document.getElementById('bannedChampions');
        if (bannedChampionsContainer) {
          bannedChampionsContainer.innerHTML = '<div class="empty-champion-list">밴된 챔피언이 없습니다</div>';
        }
        
        // 숨겨진 밴 슬롯 표시 복원 (비주얼 초기화)
        document.querySelectorAll('.team-ban-slots').forEach(slot => {
          slot.style.visibility = '';
          slot.style.display = '';
        });
        
        // 강제 리플로우 및 렌더링 트리거
        void document.body.offsetHeight;
        document.documentElement.style.display = 'none';
        document.documentElement.offsetHeight;
        document.documentElement.style.display = '';
      } catch (error) {
        console.error('밴 슬롯 초기화 중 오류 발생:', error);
      }
    }
    
    // 기존 밴 슬롯 초기화 함수 - 백업
    function resetBanSlots() {
      console.log('기본 밴 슬롯 초기화 실행');
      
      // 팀1 밴 슬롯 초기화
      const team1BanSlots = document.querySelectorAll('.teams-container .team:first-child .team-ban-slots .ban-slot');
      team1BanSlots.forEach(slot => {
        slot.innerHTML = '';
        slot.classList.add('empty');
      });
      
      // 팀2 밴 슬롯 초기화
      const team2BanSlots = document.querySelectorAll('.teams-container .team:last-child .team-ban-slots .ban-slot');
      team2BanSlots.forEach(slot => {
        slot.innerHTML = '';
        slot.classList.add('empty');
      });
      
      // 중앙 밴 섹션 초기화
      const bannedChampionsContainer = document.getElementById('bannedChampions');
      if (bannedChampionsContainer) {
        bannedChampionsContainer.innerHTML = '<div class="empty-champion-list">밴된 챔피언이 없습니다</div>';
      }
      
      // 슬롯 상태 적용을 위한 강제 리플로우
      void document.body.offsetHeight;
    }

    // 호스트 변경 이벤트
    socket.on('host-changed', (isNewHost) => {
      isHost = isNewHost;
      if (isHost) {
        console.log('호스트 권한 획득');
        
        // 호스트가 되었을 때 게임룸이 숨겨져 있다면 표시
        if (document.getElementById('gameRoom').style.display === 'none') {
          console.log('호스트 권한 획득 시 게임룸이 숨겨져 있어 표시로 변경');
          document.getElementById('gameRoom').style.display = 'block';
        }
        
        document.getElementById('resetGameBtn').disabled = false;
        document.getElementById('resetRoomBtn').disabled = false;
        
        // 호스트면 밴 컨트롤 표시
        if (!gameStarted) {
          document.getElementById('banPhaseControls').style.display = 'flex';
        }
        
        // 호스트 변경 시 참여 상태 업데이트
        hasJoined = true;
        localStorage.setItem('hasJoined', 'true');
        
        Toastify({
          text: "호스트 권한이 부여되었습니다!",
          duration: 1500,
          gravity: "top",
          position: "center",
          style: {
            background: "linear-gradient(to right, #00b09b, #96c93d)",
            color: "white",
            fontWeight: "bold",
            fontSize: "16px",
            padding: "15px",
            borderRadius: "5px"
          }
        }).showToast();
      } else {
        // 호스트가 아니면 밴 컨트롤 숨기기
        document.getElementById('banPhaseControls').style.display = 'none';
      }
    });

    // 방 초기화 버튼
    document.getElementById('resetRoomBtn').addEventListener('click', () => {
      const password = prompt('방을 초기화하려면 비밀번호를 입력하세요');
      if (password) {
        socket.emit('reset-room', password);
      }
    });

    // 방 초기화 에러 처리
    socket.on('reset-room-error', (message) => {
      Toastify({
        text: message,
        duration: 1500,
        gravity: "top",
        position: "center",
        style: {
          background: "linear-gradient(to right, #ff0000, #d32f2f)",
          color: "white",
          fontWeight: "bold",
          fontSize: "16px",
          padding: "15px",
          borderRadius: "5px"
        }
      }).showToast();
    });

    // 방 초기화
    socket.on('room-reset', () => {
      Toastify({
        text: "방이 초기화되었습니다. 페이지를 새로고침하세요.",
        duration: 3000,
        gravity: "top",
        position: "center",
        style: {
          background: "linear-gradient(to right, #ff0000, #d32f2f)",
          color: "white",
          fontWeight: "bold",
          fontSize: "16px",
          padding: "15px",
          borderRadius: "5px"
        }
      }).showToast();
      
      // 접속 상태 초기화
      hasJoined = false;
      localStorage.removeItem('hasJoined');
      
      // 밴 슬롯 초기화
      resetBanSlots();
      
      // 3초 후 페이지 새로고침
      setTimeout(() => {
        window.location.reload();
      }, 3000);
    });

    // 챔피언 표시 업데이트
    function updateChampionDisplay() {
      const seats = document.querySelectorAll('.seat.taken');
      seats.forEach(seat => {
        const playerName = seat.querySelector('.player-info div').textContent;
        if (playerName === socket.nickname) {
          const championDisplay = seat.querySelector('.champion-display') || 
                                document.createElement('div');
          championDisplay.className = 'champion-display';
          championDisplay.innerHTML = `<img src="/champions/${currentChampion}.png" alt="${currentChampion}">`;
          if (!seat.querySelector('.champion-display')) {
            seat.querySelector('.player-info').appendChild(championDisplay);
          }
        }
      });
    }

    // 챔피언 리스트 업데이트
    function updateChampionList(champions) {
      const championList = document.getElementById('championList');
      championList.innerHTML = '';
      
      if (!champions || champions.length === 0) {
        const emptyMessage = document.createElement('div');
        emptyMessage.className = 'empty-champion-list';
        emptyMessage.textContent = '사용 가능한 챔피언이 없습니다';
        championList.appendChild(emptyMessage);
        return;
      }
      
      // 게임 모드 확인 - 밴 모드에서는 밴된 챔피언 표시 로직 변경
      const isBanPhaseActive = document.querySelector('.teams-container').classList.contains('ban-mode');
      const isGameStarted = gameStarted; // 전역 변수 사용
      
      // 밴 모드와 게임 시작 여부에 따른 처리
      if (isBanPhaseActive && !isGameStarted) {
        // 밴 단계에서는 밴된 챔피언만 확인
        const myStatus = playerBanStatus[socket.id];
        const myBannedChampion = myStatus && myStatus.champion ? myStatus.champion : null;
        
        // 챔피언 목록 순회하며 그리드에 추가
      champions.forEach(champion => {
          const item = document.createElement('div');
          item.className = 'champion-item';
          
          // 내가 밴한 챔피언만 밴 표시
          const isBanned = myBannedChampion === champion;
          
          if (isBanned) {
            item.classList.add('banned');
          }
          
          // 한글 이름 추가
          const koreanName = getKoreanName(champion);
          item.innerHTML = `<img src="/champions/${champion}.png" alt="${champion}" title="${koreanName}">`;
          
          // 밴 선택 이벤트
          if (!isBanned) {
            item.addEventListener('click', () => {
              // 이전에 선택한 챔피언 스타일 초기화
              const prevSelected = document.querySelector('.champion-item.selected');
              if (prevSelected) {
                prevSelected.classList.remove('selected');
              }
              
              // 현재 챔피언 선택 표시
              item.classList.add('selected');
              
              // 선택한 챔피언 저장
              selectedBanChampion = champion;
              
              // 밴 확정 버튼 활성화
              document.getElementById('banConfirmBtn').disabled = false;
            });
          }
          
          championList.appendChild(item);
        });
      } else {
        // 게임 시작 후에는 스왑 가능한 챔피언 리스트
        champions.forEach(champion => {
          const item = document.createElement('div');
          item.className = 'champion-item';
          
          // 한글 이름 추가
          const koreanName = getKoreanName(champion);
          item.innerHTML = `<img src="/champions/${champion}.png" alt="${champion}" title="${koreanName}">`;
          
          // 챔피언 스왑 이벤트 리스너 등록
          item.addEventListener('click', () => {
            // 내 현재 챔피언과 스왑
            console.log('챔피언 스왑 요청:', champion);
            socket.emit('swap-champion', champion);
          });
          
          championList.appendChild(item);
        });
      }
    }

    // 챔피언 리스트 업데이트 이벤트
    socket.on('champion-list-update', (champions) => {
      updateChampionList(champions);
    });

    // 카운트다운 시작
    socket.on('start-countdown', (duration) => {
      // 기존 타이머가 있다면 초기화
      if (countdownInterval) {
        clearInterval(countdownInterval);
        countdownInterval = null;
      }

      const countdownElement = document.getElementById('countdown');
      countdownElement.style.display = 'block';
      
      let timeLeft = duration;
      countdownInterval = setInterval(() => {
        const minutes = Math.floor(timeLeft / 60);
        const seconds = timeLeft % 60;
        countdownElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
        
        if (timeLeft <= 0) {
          clearInterval(countdownInterval);
          countdownInterval = null;
          countdownElement.textContent = '시간 종료!';
          countdownElement.style.color = '#ff0000';
          
          // 리롤 버튼 비활성화
          document.getElementById('rerollBtn').disabled = true;
          
          // 챔피언 리스트 비활성화
          const championItems = document.querySelectorAll('.champion-item');
          championItems.forEach(item => {
            item.style.pointerEvents = 'none';
            item.style.opacity = '0.5';
          });
        }
        timeLeft--;
      }, 1000);
    });

    // 카운트다운 초기화
    socket.on('countdown-reset', () => {
      // 기존 타이머가 있다면 초기화
      if (countdownInterval) {
        clearInterval(countdownInterval);
        countdownInterval = null;
      }

      const countdownElement = document.getElementById('countdown');
      countdownElement.style.display = 'none';
      countdownElement.textContent = '';
      countdownElement.style.color = '#ff0000';
      
      // 리롤 버튼 초기화
      const rerollBtn = document.getElementById('rerollBtn');
      rerollBtn.disabled = true;
      
      // 챔피언 리스트 초기화
      const championList = document.getElementById('championList');
      championList.innerHTML = '';
      
      // 게임 상태 메시지 초기화
      const gameStatusMessage = document.getElementById('gameStatusMessage');
      gameStatusMessage.textContent = '게임이 시작되지 않았습니다. 팀을 선택해주세요.';
    });

    // 챔피언 스왑 성공 이벤트
    socket.on('champion-swapped', (data) => {
      const { oldChampion, newChampion } = data;
      currentChampion = newChampion;
      updateChampionDisplay();
    });

    // 테마 전환 기능
    const themeSwitch = document.getElementById('themeSwitch');

    function toggleTheme() {
      isDarkTheme = !isDarkTheme;
      document.documentElement.setAttribute('data-theme', isDarkTheme ? 'dark' : 'light');
      themeSwitch.textContent = isDarkTheme ? '🌙' : '🌞';
      
      // 쿠키에 테마 설정 저장 (30일 동안 유지)
      setCookie("darkMode", isDarkTheme.toString(), 30);
      
      // 테마 변경 알림
      Toastify({
        text: `${isDarkTheme ? '다크' : '라이트'} 모드로 변경되었습니다`,
        duration: 1500,
        gravity: "top",
        position: "center",
        style: {
          background: isDarkTheme ? 
            "linear-gradient(to right, #1a1a2e, #0a0a1e)" : 
            "linear-gradient(to right, #00b09b, #96c93d)",
          color: "white",
          fontWeight: "bold",
          fontSize: "16px",
          padding: "15px",
          borderRadius: "5px"
        }
      }).showToast();
    }

    themeSwitch.addEventListener('click', toggleTheme);

    // 랜덤 배정 버튼 이벤트 리스너
    document.getElementById('randomAssignBtn').addEventListener('click', () => {
      if (isHost) {
        socket.emit('random-assign-teams');
        
        // 알림 메시지 표시
        Toastify({
          text: "플레이어들을 랜덤으로 팀에 배정합니다!",
          duration: 3000,
          gravity: "top",
          position: "center",
          style: {
            background: "linear-gradient(to right, #8E2DE2, #4A00E0)",
            color: "white",
            fontWeight: "bold",
            fontSize: "16px",
            padding: "15px",
            borderRadius: "5px"
          }
        }).showToast();
      }
    });

    // 리롤 보너스 알림
    socket.on('reroll-bonus', (data) => {
      // 서버에서 전송한 업데이트된 통계 값만 사용
      playerStats.rerollCount = data.newCount;
      // 승패 처리는 서버에서 이미 처리되므로 여기서는 통계만 업데이트
      savePlayerStats();
      
      Toastify({
        text: data.message + ` (현재: ${data.newCount})`,
        duration: 3000,
        gravity: "bottom",
        position: "right",
        style: {
          background: "linear-gradient(to right, #FF9800, #FF5722)",
          color: "white",
          fontWeight: "bold",
          fontSize: "14px",
          padding: "12px",
          borderRadius: "5px"
        }
      }).showToast();
    });
    // 공지사항 표시 함수
    function showNotice() {
      // 이미 본 공지사항인지 확인
      const noticeShown = getCookie("noticeVersion");
      if (noticeShown === NOTICE_VERSION) {
        return; // 이미 현재 버전의 공지사항을 봤으면 표시하지 않음
      }

      // 모달 생성
      const modal = document.createElement('div');
      modal.className = 'notice-modal';
      modal.innerHTML = `
        <div class="notice-modal-content">
          <div class="notice-title">업데이트 안내 <small>(2025.05.11)</small></div>
          <div class="notice-content">
            <div class="notice-update-item">
              <b>자리 저장</b>: 자리 저장 기능이 추가되어 알트탭시 연결이 끊겨도 재접속시 기존 자리에 배치됩니다.
            </div>
            <div class="notice-update-item">
              <b>리롤 지급 시스템 변경</b>: 기존에 패배팀에게만 지급되었던 리롤 보너스가 승리팀에게 1회, 패배팀에게 2회 지급됩니다.
            </div>
            <div class="notice-update-item">
              <b>초기화</b>: 리롤 지급 시스템 변경으로 인해 플레이어 정보를 모두 초기화했습니다.
            </div>
          </div>
          <div class="notice-buttons">
            <button class="notice-dont-show">다시 보지 않기</button>
            <button class="notice-close">닫기</button>
          </div>
        </div>
      `;
      document.body.appendChild(modal);

      // 이벤트 리스너 추가
      modal.querySelector('.notice-close').addEventListener('click', () => {
        document.body.removeChild(modal);
      });

      modal.querySelector('.notice-dont-show').addEventListener('click', () => {
        setCookie("noticeVersion", NOTICE_VERSION, 90); // 90일 동안 저장
        document.body.removeChild(modal);
      });
    }

    // 리롤 버튼 클릭 이벤트
    document.getElementById('rerollBtn').addEventListener('click', () => {
      const rerollBtn = document.getElementById('rerollBtn');
      if (!rerollBtn.disabled && playerStats.rerollCount > 0) {
        socket.emit('request-reroll');
        // 로컬 리롤 카운트는 서버의 응답을 통해 업데이트 (중복 방지)
      } else {
        // 리롤 버튼이 비활성화된 상태에서 클릭했을 때만 알림 표시
        Toastify({
          text: "리롤 횟수가 모두 소진되었습니다!",
          duration: 1500,
          gravity: "bottom",
          position: "right",
          style: {
            background: "linear-gradient(to right, #f44336, #d32f2f)",
            color: "white",
            fontWeight: "bold",
            fontSize: "14px",
            padding: "12px",
            borderRadius: "5px"
          }
        }).showToast();
      }
    });
    
    // 게임 시작 버튼
    document.getElementById('startGameBtn').addEventListener('click', () => {
      if (isHost) {
        // 게임 모드 선택 모달 표시
        document.getElementById('modeSelectModal').style.display = 'flex';
      }
    });

    // 일반 모드 버튼 클릭
    document.getElementById('normalModeBtn').addEventListener('click', () => {
      document.getElementById('modeSelectModal').style.display = 'none';
      isBanMode = false;
      socket.emit('start-game', { mode: 'normal' });
    });

    // 밴 모드 버튼 클릭
    document.getElementById('banModeBtn').addEventListener('click', () => {
      document.getElementById('modeSelectModal').style.display = 'none';
      isBanMode = true;
      // 모든 밴 슬롯 초기화
      resetBanSlots();
      socket.emit('start-game', { mode: 'ban' });
    });

    // 밴 모드 시작 이벤트 처리
    socket.on('start-ban-phase', (data) => {
      // 밴 단계 시작
      document.getElementById('bannedChampionsTitle').textContent = '밴할 챔피언을 선택해주세요';
      
      // 게임 상태 메시지 업데이트 - 밴 단계 안내
      const gameStatusMessage = document.getElementById('gameStatusMessage');
      if (gameStatusMessage) {
        gameStatusMessage.textContent = '밴 단계: 밴할 챔피언을 선택해주세요!';
        gameStatusMessage.style.color = '#f44336'; // 밴 단계에서는 붉은색으로 표시
      }
      
      // 밴 단계 종료 플래그 초기화
      banPhaseEnded = false;
      
      // 밴 모드로 UI 변경
      const bannedChampionsSection = document.getElementById('bannedChampionsSection');
      bannedChampionsSection.classList.add('ban-mode');
      bannedChampionsSection.style.display = 'block'; // 밴 단계에서는 밴 섹션 표시
      
      // 팀 컨테이너에서 no-ban 클래스 제거
      const teamsContainer = document.querySelector('.teams-container');
      teamsContainer.classList.remove('no-ban');
      teamsContainer.classList.add('ban-mode');
      
      // 플레이어 밴 상태 초기화
      playerBanStatus = data.players;
      
      // 내 팀 확인 - 여러 방법으로 시도
      let myTeam = socket.team; // 기본값으로 소켓에 저장된 팀 사용
      
      // 플레이어 밴 상태에서 내 팀 확인
      if (playerBanStatus[socket.id] && playerBanStatus[socket.id].team) {
        myTeam = playerBanStatus[socket.id].team;
      }
      
      // 게임 상태에서 내 팀 확인
      if (data.state) {
        // team1에서 확인
        const team1Player = data.state.team1.find(p => p && p.id === socket.id);
        if (team1Player) {
          myTeam = 'team1';
        }
        
        // team2에서 확인
        const team2Player = data.state.team2.find(p => p && p.id === socket.id);
        if (team2Player) {
          myTeam = 'team2';
        }
      }
      
      console.log('내 팀 확인:', myTeam, '소켓 ID:', socket.id);
      
      // 내 팀에 클래스 추가 (CSS 식별용)
      const teams = document.querySelectorAll('.team');
      teams.forEach((team, index) => {
        // index 0 = 팀 1, index 1 = 팀 2
        const teamType = index === 0 ? 'team1' : 'team2';
        if (teamType === myTeam) {
          team.classList.add('my-team');
        } else {
          team.classList.remove('my-team');
        }
      });
      
      // 중앙 섹션 컨트롤 표시
      document.getElementById('playerBanStatus').style.display = 'flex';
      document.getElementById('banTimerDisplay').style.display = 'block';
      
      // 호스트 여부에 상관없이 모든 플레이어에게 챔피언 리스트 표시
      // 단, 밴 확정 버튼은 각자 필요함
      document.getElementById('banPhaseControls').style.display = 'block';
      document.getElementById('bannedChampions').style.display = 'none';
      
      // 밴 단계에서도 챔피언 리스트 섹션 표시 유지
      document.querySelector('.champion-list').style.display = 'block';
      
      updatePlayerBanStatus();
      
      // 모든 챔피언 표시
      renderChampionGrid();
      
      // 밴 타이머 시작 (1분 30초)
      startBanTimer(90);
      
      // 모든 자리 업데이트 - 밴 모드에서는 자리 이동 버튼 비활성화
      const state = data.state;
      if (state) {
        updateSeats(state.team1, 'team1Seats');
        updateSeats(state.team2, 'team2Seats');
        updateSeats(state.waiting, 'waitingSeats');
        
        // 현재 팀 밴 상태 표시 - 자기 팀만
        if (myTeam === 'team1' && state.team1Bans && state.team1Bans.length > 0) {
          updateTeamBanSlots('team1', state.team1Bans);
        } else if (myTeam === 'team2' && state.team2Bans && state.team2Bans.length > 0) {
          updateTeamBanSlots('team2', state.team2Bans);
        }
      }
      
      // 밴 단계에서는 게임 시작 버튼 비활성화
      if (isHost) {
        document.getElementById('startGameBtn').disabled = true;
      }
    });

    // 밴 단계 완료 이벤트
    socket.on('ban-phase-complete', (data) => {
      // 밴 단계 종료 플래그 설정
      banPhaseEnded = true;
      
      // 게임 상태 메시지 업데이트 - 밴 단계 종료 표시
      const gameStatusMessage = document.getElementById('gameStatusMessage');
      if (gameStatusMessage) {
        gameStatusMessage.textContent = '밴 단계 완료! 게임이 시작됩니다.';
        gameStatusMessage.style.color = '#4CAF50'; // 밴 단계 종료 후 녹색으로 표시
      }
      
      // 밴 타이머 정지
      if (banTimerInterval) {
        clearInterval(banTimerInterval);
        banTimerInterval = null;
      }
      
      // 이제 밴 단계가 끝났으므로 팀별 밴 챔피언 업데이트 (이제 모든 정보 표시)
      if (data.team1Bans && data.team1Bans.length > 0) {
        updateTeamBanSlots('team1', data.team1Bans);
      }
      if (data.team2Bans && data.team2Bans.length > 0) {
        updateTeamBanSlots('team2', data.team2Bans);
      }
      
      // 밴 섹션 원래 상태로 복원
      const bannedChampionsSection = document.getElementById('bannedChampionsSection');
      bannedChampionsSection.classList.remove('ban-mode');
      bannedChampionsSection.style.display = 'none'; // 밴 단계 완료 후 밴 섹션 숨기기
      
      // 팀 컨테이너에 no-ban 클래스 추가
      const teamsContainer = document.querySelector('.teams-container');
      teamsContainer.classList.add('no-ban');
      teamsContainer.classList.remove('ban-mode');
      
      // 팀에서 my-team 클래스 제거
      document.querySelectorAll('.team').forEach(team => {
        team.classList.remove('my-team');
      });
      
      document.getElementById('bannedChampionsTitle').textContent = '밴 챔피언';
      document.getElementById('playerBanStatus').style.display = 'none';
      document.getElementById('banTimerDisplay').style.display = 'none';
      document.getElementById('banPhaseControls').style.display = 'none';
      document.getElementById('bannedChampions').style.display = 'grid';
      
      // 전체 밴 챔피언 목록 업데이트
      bannedChampions = data.allBannedChampions;
      updateBannedChampions(); // 중앙 밴 챔피언 섹션 업데이트
      
      // 게임 시작 알림
      Toastify({
        text: "밴 단계가 완료되었습니다. 게임을 시작합니다!",
        duration: 3000,
        gravity: "top",
        position: "center",
        style: {
          background: "linear-gradient(to right, #4CAF50, #2E7D32)",
          color: "white",
          fontWeight: "bold",
          fontSize: "16px",
          padding: "15px",
          borderRadius: "5px"
        }
      }).showToast();
    });
    
    // 밴 타이머 시작 함수
    function startBanTimer(duration) {
      let timer = duration;
      const timerDisplay = document.getElementById('banTimerDisplay');
      const gameStatusMessage = document.getElementById('gameStatusMessage');
      
      // 이전 타이머가 있다면 초기화
      if (banTimerInterval) {
        clearInterval(banTimerInterval);
      }
      
      updateTimerDisplay();
      
      banTimerInterval = setInterval(() => {
        timer--;
        updateTimerDisplay();
        
        // 타이머 경과 시간에 따라 게임 상태 메시지 업데이트
        if (timer <= 10 && gameStatusMessage) {
          gameStatusMessage.textContent = `밴 단계: 서둘러 밴할 챔피언을 선택하세요! (${timer}초 남음)`;
          gameStatusMessage.style.color = timer % 2 === 0 ? '#ff0000' : '#ff9800'; // 깜빡이는 효과
        }
        
        if (timer <= 0) {
          clearInterval(banTimerInterval);
          
          // 타이머 종료 시 게임 상태 메시지 업데이트
          if (gameStatusMessage) {
            gameStatusMessage.textContent = '밴 시간이 종료되었습니다. 밴 처리 중...';
            gameStatusMessage.style.color = '#ff9800';
          }
          
          // 시간이 다 됐는데 밴을 선택하지 않았다면 자동으로 랜덤 밴
          if (!selectedBanChampion) {
            const availableChampions = getAvailableBanChampions();
            if (availableChampions.length > 0) {
              const randomIndex = Math.floor(Math.random() * availableChampions.length);
              selectedBanChampion = availableChampions[randomIndex];
              socket.emit('ban-champion', {
                champion: selectedBanChampion,
                auto: true
              });
            }
          }
        }
      }, 1000);
      
      function updateTimerDisplay() {
        const minutes = Math.floor(timer / 60);
        const seconds = timer % 60;
        timerDisplay.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        
        // 10초 이하로 남으면 빨간색으로 깜빡이게
        if (timer <= 10) {
          timerDisplay.style.color = timer % 2 === 0 ? '#f44336' : '#ff9800';
        } else {
          timerDisplay.style.color = '#f44336';
        }
      }
    }

    // 사용 가능한 밴 챔피언 목록 가져오기
    function getAvailableBanChampions() {
      // 이미 밴된 챔피언들을 제외한 목록 반환
      const allBannedChampions = Object.values(playerBanStatus)
                                      .filter(status => status.champion)
                                      .map(status => status.champion);
      
      return champions.filter(champion => !allBannedChampions.includes(champion));
    }

    // 챔피언 그리드 렌더링
    function renderChampionGrid() {
      const grid = document.getElementById('championGrid');
      grid.innerHTML = '';
      
      // 내 정보와 밴한 챔피언 확인
      const myStatus = playerBanStatus[socket.id];
      const myTeam = myStatus ? myStatus.team : socket.team;
      const myBannedChampion = myStatus && myStatus.champion ? myStatus.champion : null;
      
      // 팀별로 이미 밴한 챔피언 목록 구성
      const myTeamBans = [];
      const myTeamSelecting = [];
      const enemyTeamBans = [];
      
      Object.values(playerBanStatus).forEach(status => {
        if (status.team === myTeam) {
          if (status.champion) {
            myTeamBans.push(status.champion);
          } else if (status.selectingChampion) {
            myTeamSelecting.push(status.selectingChampion);
          }
        } else if (status.champion) {
          enemyTeamBans.push(status.champion);
        }
      });
      
      // 챔피언 목록 순회하며 그리드에 추가
      champions.forEach(champion => {
        const item = document.createElement('div');
        item.className = 'champion-item';
        
        // 내가 밴한 챔피언 또는 같은 팀이 이미 밴한 챔피언은 밴 표시
        const isBannedByMe = myBannedChampion === champion;
        const isBannedByMyTeam = myTeamBans.includes(champion);
        const isSelectedByMyTeam = myTeamSelecting.includes(champion);
        
        if (isBannedByMe || isBannedByMyTeam) {
          item.classList.add('banned');
        } else if (isSelectedByMyTeam) {
          item.classList.add('selected-by-team');
        }
        
        // 한글 이름 추가
        const koreanName = getKoreanName(champion);
        item.innerHTML = `<img src="/champions/${champion}.png" alt="${champion}" title="${koreanName}">`;
        
        // 밴 선택 이벤트 - 내가 이미 밴했거나 같은 팀이 밴한 챔피언은 선택 불가
        if (!isBannedByMe && !isBannedByMyTeam) {
          item.addEventListener('click', () => {
            // 이전에 선택한 챔피언 스타일 초기화
            const prevSelected = document.querySelector('.champion-item.selected');
            if (prevSelected) {
              prevSelected.classList.remove('selected');
            }
            
            // 현재 챔피언 선택 표시
            item.classList.add('selected');
            
            // 선택한 챔피언 저장
            selectedBanChampion = champion;
            
            // 선택 중인 챔피언 정보 서버에 전송 (아직 확정은 아님)
            socket.emit('selecting-ban-champion', champion);
            
            // 밴 확정 버튼 활성화
            document.getElementById('banConfirmBtn').disabled = false;
          });
        } else {
          // 같은 팀이 이미 밴한 챔피언은 선택 불가
          item.style.pointerEvents = 'none';
        }
        
        grid.appendChild(item);
      });
    }

    // 플레이어 밴 상태 업데이트
    function updatePlayerBanStatus() {
      const container = document.getElementById('playerBanStatus');
      container.innerHTML = '';
      
      // 내 팀 정보 확인
      const myStatus = playerBanStatus[socket.id];
      const myTeam = myStatus ? myStatus.team : socket.team;
      
      // 플레이어를 팀별로 분류
      const myTeamPlayers = [];
      
      Object.entries(playerBanStatus).forEach(([playerId, data]) => {
        if (data.team === myTeam) {
          myTeamPlayers.push({playerId, ...data});
        }
      });
      
      // 내 팀 섹션 제목 추가
      const myTeamHeader = document.createElement('div');
      myTeamHeader.className = 'ban-team-header';
      myTeamHeader.textContent = myTeam === 'team1' ? '팀 1 밴 현황' : '팀 2 밴 현황';
      container.appendChild(myTeamHeader);
      
      // 내 팀 플레이어 상태 표시
      myTeamPlayers.forEach(player => {
        const isCurrentPlayer = player.playerId === socket.id;
        const item = document.createElement('div');
        item.className = `player-ban-item ${player.champion ? 'completed' : 'selecting'}`;
        
        let displayName = player.nickname;
        if (isCurrentPlayer) {
          displayName += ' (나)';
        }
        
        let banStatus = '';
        if (player.champion) {
          // 내 팀이 밴한 챔피언은 항상 표시
          const championName = player.champion;
          const koreanName = getKoreanName(championName);
          banStatus = `<div class="player-ban-image" title="${koreanName}"><img src="/champions/${championName}.png" alt="${championName}"></div>`;
        } else if (player.selectingChampion) {
          // 선택 중인 챔피언이 있으면 표시
          const championName = player.selectingChampion;
          const koreanName = getKoreanName(championName);
          banStatus = `<div class="player-ban-image" title="${koreanName} (선택 중)" style="opacity:0.7;"><img src="/champions/${championName}.png" alt="${championName}"></div>`;
        } else {
          // 아무것도 선택하지 않은 경우 "선택 중" 표시
          banStatus = `<span class="selecting-status">선택 중...</span>`;
        }
        
        item.innerHTML = `
          <span>${displayName}</span>
          ${banStatus}
        `;
        
        container.appendChild(item);
      });
      
      // 상대팀 섹션은 표시하지 않음 (완전히 제거)
    }

    // 밴 확정 버튼 클릭
    document.getElementById('banConfirmBtn').addEventListener('click', () => {
      if (selectedBanChampion) {
        socket.emit('ban-champion', {
          champion: selectedBanChampion,
          auto: false
        });
        
        // 버튼 비활성화
        document.getElementById('banConfirmBtn').disabled = true;
        
        // 선택 중인 상태 초기화
        socket.emit('selecting-ban-champion', null);
      }
    });

    // 밴 확정 응답 이벤트 처리
    socket.on('ban-confirmed', (data) => {
      // 플레이어 밴 상태 업데이트
      if (data.playerId && playerBanStatus[data.playerId]) {
        // 해당 플레이어의 밴 상태 업데이트
        playerBanStatus[data.playerId].champion = data.champion;
        playerBanStatus[data.playerId].selectingChampion = null;
        
        // 나의 밴이라면 선택 초기화
        if (data.playerId === socket.id) {
          selectedBanChampion = null;
          
          // 선택된 챔피언 스타일 초기화
          const selectedChamp = document.querySelector('.champion-item.selected');
          if (selectedChamp) {
            selectedChamp.classList.remove('selected');
          }
          
          // 토스트 알림 표시
          Toastify({
            text: data.auto ? 
                  `시간 초과로 ${getKoreanName(data.champion)} 챔피언이 자동 밴 되었습니다!` : 
                  `${getKoreanName(data.champion)} 챔피언을 밴했습니다!`,
            duration: 3000,
            gravity: "top",
            position: "center",
            style: {
              background: data.auto ? 
                        "linear-gradient(to right, #ff9800, #f57c00)" : 
                        "linear-gradient(to right, #f44336, #d32f2f)",
              color: "white",
              fontWeight: "bold",
              fontSize: "14px",
              padding: "12px",
              borderRadius: "5px"
            }
          }).showToast();
        }
        
        // UI 업데이트
        updatePlayerBanStatus();
        renderChampionGrid();
      }
    });

    // 밴 검색 입력 처리
    document.getElementById('banSearchInput').addEventListener('input', (e) => {
      const searchTerm = e.target.value.toLowerCase();
      
      // 모든 챔피언 아이템 순회하며 검색어에 맞는 것만 표시
      const items = document.querySelectorAll('.champion-item');
      items.forEach(item => {
        const championNameEnglish = item.querySelector('img').alt;
        const championNameKorean = getKoreanName(championNameEnglish).toLowerCase();
        
        // 영문 이름이나 한글 이름에 검색어가 포함되어 있으면 표시
        if (championNameEnglish.toLowerCase().includes(searchTerm) || 
            championNameKorean.includes(searchTerm) || 
            searchTerm === '') {
          item.style.display = '';
        } else {
          item.style.display = 'none';
        }
      });
    });

    // 밴 챔피언 업데이트 함수
    function updateBannedChampions() {
      const bannedList = document.getElementById('bannedChampions');
      bannedList.innerHTML = '';
      
      if (!bannedChampions || bannedChampions.length === 0) {
        const emptyMessage = document.createElement('div');
        emptyMessage.className = 'empty-champion-list';
        emptyMessage.textContent = '밴된 챔피언이 없습니다';
        bannedList.appendChild(emptyMessage);
        return;
      }
      
      bannedChampions.forEach(champion => {
        const bannedChampion = document.createElement('div');
        bannedChampion.className = 'banned-champion';
        bannedChampion.innerHTML = `
          <img src="/champions/${champion}.png" alt="${champion}" title="${champion}">
        `;
        bannedList.appendChild(bannedChampion);
      });
    }

    // 팀 밴 슬롯 업데이트 함수
    function updateTeamBanSlots(team, bannedChampions) {
      if (!bannedChampions || !team) return;
      
      // 밴 슬롯 선택 (팀 1 또는 팀 2)
      const teamSelector = team === 'team1' ? '.teams-container .team:first-child' : '.teams-container .team:last-child';
      const banSlots = document.querySelectorAll(`${teamSelector} .team-ban-slots .ban-slot`);
      
      // 모든 슬롯 초기화
      banSlots.forEach(slot => {
        slot.innerHTML = '';
        slot.classList.add('empty');
      });
      
      // 밴된 챔피언 표시
      bannedChampions.forEach((champion, index) => {
        if (index < banSlots.length && champion) {
          const slot = banSlots[index];
          slot.innerHTML = `<img src="/champions/${champion}.png" alt="${champion}" title="${getKoreanName(champion)}">`;
          slot.classList.remove('empty');
        }
      });
    }

    // 밴 슬롯 초기화 함수
    function resetBanSlots() {
      console.log('밴 슬롯 초기화 실행');
      
      // 팀1 밴 슬롯 초기화
      const team1BanSlots = document.querySelectorAll('.teams-container .team:first-child .team-ban-slots .ban-slot');
      team1BanSlots.forEach(slot => {
        slot.innerHTML = '';
        slot.classList.add('empty');
      });
      
      // 팀2 밴 슬롯 초기화
      const team2BanSlots = document.querySelectorAll('.teams-container .team:last-child .team-ban-slots .ban-slot');
      team2BanSlots.forEach(slot => {
        slot.innerHTML = '';
        slot.classList.add('empty');
      });
      
      // 중앙 밴 섹션 초기화
      const bannedChampionsContainer = document.getElementById('bannedChampions');
      if (bannedChampionsContainer) {
        bannedChampionsContainer.innerHTML = '<div class="empty-champion-list">밴된 챔피언이 없습니다</div>';
      }
      
      // 슬롯 상태 적용을 위한 강제 리플로우
      void document.body.offsetHeight;
    }

    // 플레이어 밴 선택 중인 챔피언 업데이트 이벤트
    socket.on('player-selecting-champion', (data) => {
      // 플레이어가 선택 중인 챔피언 정보 업데이트
      if (data.playerId && data.playerId !== socket.id) { // 자신이 아닌 다른 플레이어의 정보만 업데이트
        if (playerBanStatus[data.playerId]) {
          // 같은 팀인지 확인
          const myStatus = playerBanStatus[socket.id];
          const myTeam = myStatus ? myStatus.team : socket.team;
          const playerTeam = playerBanStatus[data.playerId].team;
          
          // 같은 팀인 경우에만 선택 중인 챔피언 표시
          if (myTeam === playerTeam) {
            playerBanStatus[data.playerId].selectingChampion = data.champion;
            
            // 플레이어 밴 상태 UI 업데이트
            updatePlayerBanStatus();
            
            // 챔피언 그리드 업데이트
            renderChampionGrid();
          }
        }
      }
    });
    
    // 방 생성 성공 응답 처리
    socket.on('room-created', () => {
      console.log('방 생성 성공 응답 수신');
      isCreatingRoom = false;
      hasJoined = true;
      localStorage.setItem('hasJoined', 'true');
      
      // 방 생성 성공 시 게임룸 표시
      document.getElementById('gameRoom').style.display = 'block';
      document.getElementById('resetGameBtn').disabled = false;
      document.getElementById('resetRoomBtn').disabled = false;
      
      // 알림 메시지
      Toastify({
        text: "방 생성이 완료되었습니다!",
        duration: 2000,
        gravity: "top",
        position: "center",
        style: {
          background: "linear-gradient(to right, #00b09b, #96c93d)",
          color: "white",
          fontWeight: "bold",
          fontSize: "14px",
          padding: "12px",
          borderRadius: "5px"
        }
      }).showToast();
    });
  </script>
</body>
</html>
